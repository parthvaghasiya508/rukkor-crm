[{"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\index.js":"1","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\App.js":"2","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\reportWebVitals.js":"3","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\store.js":"4","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\route\\index.js":"5","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\index.js":"6","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\route\\PublicRoute.js":"7","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\route\\PrivateRoute.js":"8","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Login.js":"9","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\ResetPassword.js":"10","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Dashboard.js":"11","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\AddUser.js":"12","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Profile.js":"13","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\AddCountry.js":"14","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Countries.js":"15","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\ForgotPassword.js":"16","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\UserList.js":"17","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Configurations.js":"18","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\AddIndustry.js":"19","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\EditIndustry.js":"20","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Clusters.js":"21","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\AddCluster.js":"22","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Industries.js":"23","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Reasons.js":"24","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\EditCluster.js":"25","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\AddReason.js":"26","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Reports.js":"27","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Dnd_v1.js":"28","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\EditReason.js":"29","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\EditUser.js":"30","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\EditCountry.js":"31","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\user.js":"32","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\industry.js":"33","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\PageNotFound.js":"34","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\organisation.js":"35","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\cluster.js":"36","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\contact.js":"37","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\deal.js":"38","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\authentication.js":"39","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\alert.js":"40","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\reason.js":"41","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\report.js":"42","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\country.js":"43","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\stage.js":"44","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\utils\\auth.js":"45","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Alert.js":"46","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\user.js":"47","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\authentication.js":"48","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\types.js":"49","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\country.js":"50","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\reason.js":"51","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\utils\\helpers.js":"52","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Pagination.js":"53","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\report.js":"54","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\industry.js":"55","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\cluster.js":"56","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\contact.js":"57","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\organisation.js":"58","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\deal.js":"59","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\stage.js":"60","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\layout\\index.js":"61","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\alert.js":"62","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\layout\\Sidebar.js":"63","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\layout\\Header.js":"64","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\layout\\Footer.js":"65"},{"size":1001,"mtime":1622728923306,"results":"66","hashOfConfig":"67"},{"size":118,"mtime":1622728923105,"results":"68","hashOfConfig":"67"},{"size":375,"mtime":1622728923472,"results":"69","hashOfConfig":"67"},{"size":749,"mtime":1622728923467,"results":"70","hashOfConfig":"67"},{"size":3229,"mtime":1622728923486,"results":"71","hashOfConfig":"67"},{"size":1040,"mtime":1622728923431,"results":"72","hashOfConfig":"67"},{"size":457,"mtime":1622728923482,"results":"73","hashOfConfig":"67"},{"size":442,"mtime":1622728923476,"results":"74","hashOfConfig":"67"},{"size":6053,"mtime":1622728923236,"results":"75","hashOfConfig":"67"},{"size":4905,"mtime":1622728923273,"results":"76","hashOfConfig":"67"},{"size":612,"mtime":1622728923187,"results":"77","hashOfConfig":"67"},{"size":8639,"mtime":1622728923136,"results":"78","hashOfConfig":"67"},{"size":11471,"mtime":1622728923250,"results":"79","hashOfConfig":"67"},{"size":4597,"mtime":1622728923120,"results":"80","hashOfConfig":"67"},{"size":7227,"mtime":1622728923181,"results":"81","hashOfConfig":"67"},{"size":3987,"mtime":1622728923225,"results":"82","hashOfConfig":"67"},{"size":8638,"mtime":1622728923278,"results":"83","hashOfConfig":"67"},{"size":114387,"mtime":1622728923170,"results":"84","hashOfConfig":"67"},{"size":4606,"mtime":1622728923125,"results":"85","hashOfConfig":"67"},{"size":5114,"mtime":1622728923209,"results":"86","hashOfConfig":"67"},{"size":7178,"mtime":1622728923146,"results":"87","hashOfConfig":"67"},{"size":4594,"mtime":1622728923115,"results":"88","hashOfConfig":"67"},{"size":7288,"mtime":1622728923230,"results":"89","hashOfConfig":"67"},{"size":7216,"mtime":1622728923257,"results":"90","hashOfConfig":"67"},{"size":5097,"mtime":1622728923198,"results":"91","hashOfConfig":"67"},{"size":4587,"mtime":1622728923130,"results":"92","hashOfConfig":"67"},{"size":10983,"mtime":1622728923265,"results":"93","hashOfConfig":"67"},{"size":3012,"mtime":1622728923192,"results":"94","hashOfConfig":"67"},{"size":5079,"mtime":1622728923215,"results":"95","hashOfConfig":"67"},{"size":8825,"mtime":1622728923220,"results":"96","hashOfConfig":"67"},{"size":5096,"mtime":1622728923203,"results":"97","hashOfConfig":"67"},{"size":1051,"mtime":1622728923461,"results":"98","hashOfConfig":"67"},{"size":1123,"mtime":1622728923435,"results":"99","hashOfConfig":"67"},{"size":637,"mtime":1622728923240,"results":"100","hashOfConfig":"67"},{"size":1044,"mtime":1622728923440,"results":"101","hashOfConfig":"67"},{"size":1084,"mtime":1622728923410,"results":"102","hashOfConfig":"67"},{"size":959,"mtime":1622728923416,"results":"103","hashOfConfig":"67"},{"size":908,"mtime":1622728923426,"results":"104","hashOfConfig":"67"},{"size":1004,"mtime":1622728923405,"results":"105","hashOfConfig":"67"},{"size":414,"mtime":1622728923393,"results":"106","hashOfConfig":"67"},{"size":1085,"mtime":1622728923446,"results":"107","hashOfConfig":"67"},{"size":460,"mtime":1622728923451,"results":"108","hashOfConfig":"67"},{"size":1135,"mtime":1622728923420,"results":"109","hashOfConfig":"67"},{"size":925,"mtime":1622728923456,"results":"110","hashOfConfig":"67"},{"size":845,"mtime":1622728923502,"results":"111","hashOfConfig":"67"},{"size":495,"mtime":1622728923142,"results":"112","hashOfConfig":"67"},{"size":2705,"mtime":1622728923387,"results":"113","hashOfConfig":"67"},{"size":3841,"mtime":1622728923316,"results":"114","hashOfConfig":"67"},{"size":2708,"mtime":1622728923379,"results":"115","hashOfConfig":"67"},{"size":2827,"mtime":1622728923333,"results":"116","hashOfConfig":"67"},{"size":2776,"mtime":1622728923356,"results":"117","hashOfConfig":"67"},{"size":3140,"mtime":1622728923507,"results":"118","hashOfConfig":"67"},{"size":1981,"mtime":1622728923244,"results":"119","hashOfConfig":"67"},{"size":745,"mtime":1622728923362,"results":"120","hashOfConfig":"67"},{"size":2864,"mtime":1622728923345,"results":"121","hashOfConfig":"67"},{"size":2813,"mtime":1622728923322,"results":"122","hashOfConfig":"67"},{"size":2260,"mtime":1622728923328,"results":"123","hashOfConfig":"67"},{"size":2441,"mtime":1622728923351,"results":"124","hashOfConfig":"67"},{"size":2172,"mtime":1622728923339,"results":"125","hashOfConfig":"67"},{"size":2927,"mtime":1622728923373,"results":"126","hashOfConfig":"67"},{"size":1078,"mtime":1622728923302,"results":"127","hashOfConfig":"67"},{"size":341,"mtime":1622728923310,"results":"128","hashOfConfig":"67"},{"size":3615,"mtime":1622728923297,"results":"129","hashOfConfig":"67"},{"size":9224,"mtime":1622728923289,"results":"130","hashOfConfig":"67"},{"size":393,"mtime":1622728923284,"results":"131","hashOfConfig":"67"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},"kodhek",{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"134"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"134"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"134"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"134"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\index.js",[],["267","268"],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\App.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\reportWebVitals.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\store.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\route\\index.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\index.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\route\\PublicRoute.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\route\\PrivateRoute.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Login.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\ResetPassword.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Dashboard.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\AddUser.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Profile.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\AddCountry.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Countries.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\ForgotPassword.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\UserList.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Configurations.js",["269","270","271","272","273","274","275","276","277","278"],"import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Modal, Form } from \"react-bootstrap\";\r\nimport Layout from \"./layout\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport {\r\n  addStage,\r\n  getStages,\r\n  deleteStage,\r\n  changeStagePosition,\r\n  updateStage,\r\n  changeFieldPosition,\r\n} from \"../redux/actions/stage\";\r\nimport {\r\n  addOrganisation,\r\n  getOrganisation,\r\n  getOrganisations,\r\n  deleteOrganisation,\r\n  updateOrganisation,\r\n} from \"../redux/actions/organisation\";\r\nimport {\r\n  addContact,\r\n  getContacts,\r\n  deleteContact,\r\n  updateContact,\r\n} from \"../redux/actions/contact\";\r\nimport {\r\n  addDeal,\r\n  getDeals,\r\n  deleteDeal,\r\n  updateDeal,\r\n} from \"../redux/actions/deal\";\r\nimport { getAllCountries } from \"../redux/actions/country\";\r\nimport { getAllIndustries } from \"../redux/actions/industry\";\r\nimport { getAllClusters } from \"../redux/actions/cluster\";\r\nimport { connect } from \"react-redux\";\r\n// import CreatableSelect from 'react-select/creatable';\r\nimport Select from \"react-select\";\r\nimport { fieldTypes, deal_status } from \"../utils/helpers\";\r\n\r\nconst groupStyles = {\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"space-between\",\r\n};\r\nconst groupBadgeStyles = {\r\n  backgroundColor: \"#EBECF0\",\r\n  borderRadius: \"2em\",\r\n  color: \"#172B4D\",\r\n  display: \"inline-block\",\r\n  fontSize: 12,\r\n  fontWeight: \"normal\",\r\n  lineHeight: \"1\",\r\n  minWidth: 1,\r\n  padding: \"0.16666666666667em 0.5em\",\r\n  textAlign: \"center\",\r\n};\r\nconst formatGroupLabel = (data) => (\r\n  <div style={groupStyles}>\r\n    <span>{data.label}</span>\r\n    <span style={groupBadgeStyles}>{data.options.length}</span>\r\n  </div>\r\n);\r\nconst grid = 8;\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  padding: grid * 2,\r\n  margin: `0 ${grid}px 0 0`,\r\n  border: \"solid 1px #f5ecec\",\r\n  borderRadius: \"5px\",\r\n  // change background colour if dragging\r\n  background: isDragging ? \"#27dcee\" : \"transparent\",\r\n  minWidth: \"230px\",\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle,\r\n});\r\nconst stageMain = {\r\n  display: \"flex\",\r\n  padding: \"8px\",\r\n  overflow: \"auto\",\r\n};\r\n\r\nconst getTableRowStyle = (isDragging, draggableStyle) => ({\r\n  // change background colour if dragging\r\n  background: isDragging ? \"#27dcee\" : \"transparent\",\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle,\r\n});\r\nclass Configuration extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.onStageSubmit = this.onStageSubmit.bind(this);\r\n    this.onOrgSubmit = this.onOrgSubmit.bind(this);\r\n    this.onContactSubmit = this.onContactSubmit.bind(this);\r\n    this.onDealSubmit = this.onDealSubmit.bind(this);\r\n    this.handleSelectChange = this.handleSelectChange.bind(this);\r\n    this.handleSelectChange2 = this.handleSelectChange2.bind(this);\r\n    this.handleSelectChange3 = this.handleSelectChange3.bind(this);\r\n    this.editStage = this.editStage.bind(this);\r\n    this.handleOrgEdit = this.handleOrgEdit.bind(this);\r\n    this.handleContactEdit = this.handleContactEdit.bind(this);\r\n    this.handleDealEdit = this.handleDealEdit.bind(this);\r\n\r\n    this.state = {\r\n      stages: this.props.stages,\r\n\r\n      stagesModal: false,\r\n      organizationModal: false,\r\n      contactModal: false,\r\n      dealModal: false,\r\n\r\n      organizationEditModal: false,\r\n      contactEditModal: false,\r\n      dealEditModal: false,\r\n\r\n      organizationDeleteModal: false,\r\n      contactDeleteModal: false,\r\n      dealDeleteModal: false,\r\n      stageDeleteModal: false,\r\n\r\n      errors: {},\r\n      groupedOptions: [],\r\n      stage_title: \"\",\r\n      stage_color: \"\",\r\n      selectedId: \"\",\r\n\r\n      org_column: \"\",\r\n      org_editable: false,\r\n      org_sortable: false,\r\n      org_filterable: false,\r\n      org_required: false,\r\n      org_position: this.props.organisations.length + 1,\r\n      org_type: \"Text\",\r\n      org_values: [],\r\n\r\n      contact_column: \"\",\r\n      contact_editable: false,\r\n      contact_sortable: false,\r\n      contact_filterable: false,\r\n      contact_required: false,\r\n      contact_position: this.props.contacts.length + 1,\r\n      contact_type: \"Text\",\r\n      contact_values: [],\r\n\r\n      deal_column: \"\",\r\n      deal_editable: false,\r\n      deal_sortable: false,\r\n      deal_filterable: false,\r\n      deal_required: false,\r\n      deal_position: this.props.deals.length + 1,\r\n      deal_type: \"Text\",\r\n      deal_values: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n    await this.props.getStages();\r\n    await this.props.getOrganisations();\r\n    await this.props.getContacts();\r\n    await this.props.getDeals();\r\n    await this.props.getAllCountries();\r\n    await this.props.getAllIndustries();\r\n    await this.props.getAllClusters();\r\n\r\n    let stages = [];\r\n    for (let i = 0; i < this.props.stages.length; i++) {\r\n      let data = this.props.stages[i];\r\n      stages = stages.concat({\r\n        value: data[\"_id\"],\r\n        label: data[\"name\"],\r\n        color: data[\"color\"],\r\n        ref: \"stage\",\r\n      });\r\n    }\r\n\r\n    let countries = [];\r\n    for (let i = 0; i < this.props.countries.length; i++) {\r\n      let data = this.props.countries[i];\r\n      countries = countries.concat({\r\n        value: data[\"_id\"],\r\n        label: data[\"title\"],\r\n        ref: \"country\",\r\n      });\r\n    }\r\n\r\n    let industries = [];\r\n    for (let i = 0; i < this.props.industries.length; i++) {\r\n      let data = this.props.industries[i];\r\n      industries = industries.concat({\r\n        value: data[\"_id\"],\r\n        label: data[\"title\"],\r\n        ref: \"industry\",\r\n      });\r\n    }\r\n\r\n    let clusters = [];\r\n    for (let i = 0; i < this.props.clusters.length; i++) {\r\n      let data = this.props.clusters[i];\r\n      clusters = clusters.concat({\r\n        value: data[\"_id\"],\r\n        label: data[\"title\"],\r\n        ref: \"cluster\",\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      groupedOptions: [\r\n        {\r\n          label: \"Stages\",\r\n          options: stages,\r\n        },\r\n        {\r\n          label: \"Countries\",\r\n          options: countries,\r\n        },\r\n        {\r\n          label: \"Industries\",\r\n          options: industries,\r\n        },\r\n        {\r\n          label: \"Clusters\",\r\n          options: clusters,\r\n        },\r\n        {\r\n          label: \"Deal Status\",\r\n          options: deal_status,\r\n        },\r\n        {\r\n          label: \"Tables\",\r\n          options: [\r\n            {\r\n              value: \"Organizations\",\r\n              label: \"Organizations\",\r\n              ref: \"organization\",\r\n            },\r\n            {\r\n              value: \"Contacts\",\r\n              label: \"Contacts\",\r\n              ref: \"contact\",\r\n            },\r\n            {\r\n              value: \"Users\",\r\n              label: \"Users\",\r\n              ref: \"user\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n      selectedId: \"\",\r\n    });\r\n  };\r\n\r\n  handleOnDragEnd(result) {\r\n    // const { stages } = this.state;\r\n    if (!result.destination || result.source.index === result.destination.index)\r\n      return;\r\n\r\n    var formData = {\r\n      stage: result.draggableId,\r\n      last_position: result.source.index,\r\n      current_position: result.destination.index,\r\n    };\r\n\r\n    const config = {\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n    };\r\n    this.props.changeStagePosition(formData, config, this.props);\r\n  }\r\n\r\n  // Stage Submit\r\n  onStageSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (this.validateStageForm()) {\r\n      var current_user = this.props.auth_user ? this.props.auth_user._id : \"\";\r\n      const { stage_title, stage_color } = this.state;\r\n\r\n      var formData = {\r\n        user: current_user,\r\n        name: stage_title,\r\n        color: stage_color,\r\n        position: this.props.stages.length + 1,\r\n      };\r\n\r\n      const config = {\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n      };\r\n      this.props.addStage(formData, config, this.props);\r\n      this.setState({\r\n        stagesModal: false,\r\n        stage_title: \"\",\r\n        stage_color: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  handleInputChange(event) {\r\n    const { type, name, value, checked } = event.target;\r\n    console.log(\r\n      `type:${type}, name:${name}, value:${value}, checked:${checked} `\r\n    );\r\n    if (type === \"checkbox\") {\r\n      this.setState({\r\n        [name]: checked,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        [name]: value,\r\n      });\r\n    }\r\n  }\r\n\r\n  validateStageForm() {\r\n    const { stage_title, stage_color } = this.state;\r\n\r\n    let errors = {};\r\n    let formIsValid = true;\r\n\r\n    if (!stage_title.trim()) {\r\n      formIsValid = false;\r\n      errors[\"stage_title\"] = \"*Please enter stage title.\";\r\n    }\r\n\r\n    if (!stage_color.trim()) {\r\n      formIsValid = false;\r\n      errors[\"stage_color\"] = \"*Please choose stage color.\";\r\n    }\r\n\r\n    this.setState({\r\n      errors: errors,\r\n    });\r\n    return formIsValid;\r\n  }\r\n\r\n  handleStageDelete = (id) => (e) => {\r\n    this.setState({ stageDeleteModal: true, selectedId: id });\r\n  };\r\n  closeStageDeleteModal = (e) => {\r\n    this.setState({ stageDeleteModal: false });\r\n  };\r\n  openStageDeleteMoal = (e) => {\r\n    this.setState({ stageDeleteModal: true });\r\n  };\r\n  confirmStageDelete = (e) => {\r\n    this.props.deleteStage(this.state.selectedId, this.props);\r\n    this.setState({ stageDeleteModal: false, selectedId: \"\" });\r\n  };\r\n\r\n  // Org Submit\r\n  onOrgSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (this.validateOrgForm()) {\r\n      var current_user = this.props.auth_user ? this.props.auth_user._id : \"\";\r\n      const {\r\n        org_column,\r\n        org_editable,\r\n        org_sortable,\r\n        org_filterable,\r\n        org_required,\r\n        org_position,\r\n        org_type,\r\n        org_values,\r\n      } = this.state;\r\n\r\n      var formData = {\r\n        user: current_user,\r\n        table_name: \"Organization\",\r\n        slug_name: \"org\",\r\n        column_name: org_column.trim(),\r\n        column_type: org_type,\r\n        is_editable: org_editable,\r\n        is_sortable: org_sortable,\r\n        is_filterable: org_filterable,\r\n        is_required: org_required,\r\n        position: org_position,\r\n        values: org_values,\r\n      };\r\n\r\n      console.log(\"formData:\", formData);\r\n\r\n      const config = {\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      this.props.addOrganisation(formData, config, this.props);\r\n      this.setState({\r\n        organizationModal: false,\r\n        org_column: \"\",\r\n        org_editable: false,\r\n        org_sortable: false,\r\n        org_filterable: false,\r\n        org_required: false,\r\n        org_position: this.props.organisations.length + 1,\r\n        org_type: \"Text\",\r\n        org_values: [],\r\n      });\r\n    }\r\n  };\r\n\r\n  validateOrgForm() {\r\n    const { org_column, org_type, org_values } = this.state;\r\n\r\n    let errors = {};\r\n    let formIsValid = true;\r\n\r\n    if (!org_column.trim()) {\r\n      formIsValid = false;\r\n      errors[\"org_column\"] = \"*Please enter column.\";\r\n    }\r\n\r\n    if (\r\n      org_values &&\r\n      org_values.length === 0 &&\r\n      [\"choice\", \"inherit\"].includes(org_type.toLocaleLowerCase())\r\n    ) {\r\n      formIsValid = false;\r\n      errors[\"org_values\"] = \"*Please type value for this field type.\";\r\n    }\r\n\r\n    this.setState({\r\n      errors: errors,\r\n    });\r\n    return formIsValid;\r\n  }\r\n\r\n  handleSelectChange(event) {\r\n    console.log(\"handleInputChange:\", event);\r\n    let values = [];\r\n    for (let i = 0; i < event.length; i++) {\r\n      let data = event[i];\r\n      values.push({ value: data.value, ref: data.ref });\r\n    }\r\n    this.setState({\r\n      org_values: values,\r\n    });\r\n  }\r\n\r\n  handleOrgDelete = (id) => (e) => {\r\n    this.setState({ organizationDeleteModal: true, selectedId: id });\r\n  };\r\n\r\n  closeOrgDeleteModal = (e) => {\r\n    this.setState({ organizationDeleteModal: false });\r\n  };\r\n\r\n  openOrgDeleteMoal = (e) => {\r\n    this.setState({ organizationDeleteModal: true });\r\n  };\r\n\r\n  confirmOrgDelete = (e) => {\r\n    this.props.deleteOrganisation(this.state.selectedId, this.props);\r\n    this.setState({ organizationDeleteModal: false, selectedId: \"\" });\r\n  };\r\n\r\n  // Contact Submit\r\n  onContactSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (this.validateContactForm()) {\r\n      var current_user = this.props.auth_user ? this.props.auth_user._id : \"\";\r\n      const {\r\n        contact_column,\r\n        contact_editable,\r\n        contact_sortable,\r\n        contact_filterable,\r\n        contact_required,\r\n        contact_position,\r\n        contact_type,\r\n        contact_values,\r\n      } = this.state;\r\n\r\n      var formData = {\r\n        user: current_user,\r\n        table_name: \"Contact\",\r\n        slug_name: \"contact\",\r\n        column_name: contact_column.trim(),\r\n        column_type: contact_type,\r\n        is_editable: contact_editable,\r\n        is_sortable: contact_sortable,\r\n        is_filterable: contact_filterable,\r\n        is_required: contact_required,\r\n        position: contact_position,\r\n        values: contact_values,\r\n      };\r\n\r\n      console.log(\"formData:\", formData);\r\n\r\n      const config = {\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n      };\r\n      this.props.addContact(formData, config, this.props);\r\n      this.setState({\r\n        contactModal: false,\r\n        contact_column: \"\",\r\n        contact_editable: false,\r\n        contact_sortable: false,\r\n        contact_filterable: false,\r\n        contact_required: false,\r\n        contact_position: this.props.contacts.length + 1,\r\n        contact_type: \"Text\",\r\n        contact_values: [],\r\n      });\r\n    }\r\n  };\r\n\r\n  validateContactForm() {\r\n    const { contact_column, contact_type, contact_values } = this.state;\r\n\r\n    let errors = {};\r\n    let formIsValid = true;\r\n\r\n    if (!contact_column.trim()) {\r\n      formIsValid = false;\r\n      errors[\"contact_column\"] = \"*Please enter column.\";\r\n    }\r\n\r\n    if (\r\n      contact_values &&\r\n      contact_values.length === 0 &&\r\n      [\"choice\", \"inherit\"].includes(contact_type.toLocaleLowerCase())\r\n    ) {\r\n      formIsValid = false;\r\n      errors[\"contact_values\"] = \"*Please type value for this field type.\";\r\n    }\r\n\r\n    this.setState({\r\n      errors: errors,\r\n    });\r\n    return formIsValid;\r\n  }\r\n\r\n  handleSelectChange2(event) {\r\n    console.log(\"handleInputChange2:\", event);\r\n    let values = [];\r\n    for (let i = 0; i < event.length; i++) {\r\n      let data = event[i];\r\n      values.push({ value: data.value, ref: data.ref });\r\n    }\r\n    this.setState({\r\n      contact_values: values,\r\n    });\r\n  }\r\n\r\n  handleContactDelete = (id) => (e) => {\r\n    this.setState({ contactDeleteModal: true, selectedId: id });\r\n  };\r\n\r\n  closeContactDeleteModal = (e) => {\r\n    this.setState({ contactDeleteModal: false });\r\n  };\r\n\r\n  openContactDeleteMoal = (e) => {\r\n    this.setState({ contactDeleteModal: true });\r\n  };\r\n\r\n  confirmContactDelete = (e) => {\r\n    this.props.deleteContact(this.state.selectedId, this.props);\r\n    this.setState({ contactDeleteModal: false, selectedId: \"\" });\r\n  };\r\n\r\n  // Deal Submit\r\n  onDealSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (this.validateDealForm()) {\r\n      var current_user = this.props.auth_user ? this.props.auth_user._id : \"\";\r\n      const {\r\n        deal_column,\r\n        deal_editable,\r\n        deal_sortable,\r\n        deal_filterable,\r\n        deal_required,\r\n        deal_position,\r\n        deal_type,\r\n        deal_values,\r\n      } = this.state;\r\n\r\n      var formData = {\r\n        user: current_user,\r\n        table_name: \"Deal\",\r\n        slug_name: \"deal\",\r\n        column_name: deal_column.trim(),\r\n        column_type: deal_type,\r\n        is_editable: deal_editable,\r\n        is_sortable: deal_sortable,\r\n        is_filterable: deal_filterable,\r\n        is_required: deal_required,\r\n        position: deal_position,\r\n        values: deal_values,\r\n      };\r\n\r\n      console.log(\"formData:\", formData);\r\n\r\n      const config = {\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n      };\r\n      this.props.addDeal(formData, config, this.props);\r\n      this.setState({\r\n        dealModal: false,\r\n        deal_column: \"\",\r\n        deal_editable: false,\r\n        deal_sortable: false,\r\n        deal_filterable: false,\r\n        deal_required: false,\r\n        deal_position: this.props.deals.length + 1,\r\n        deal_type: \"Text\",\r\n        deal_values: [],\r\n      });\r\n    }\r\n  };\r\n\r\n  validateDealForm() {\r\n    const { deal_column, deal_type, deal_values } = this.state;\r\n\r\n    let errors = {};\r\n    let formIsValid = true;\r\n\r\n    if (!deal_column.trim()) {\r\n      formIsValid = false;\r\n      errors[\"deal_column\"] = \"*Please enter column.\";\r\n    }\r\n\r\n    if (\r\n      deal_values &&\r\n      deal_values.length === 0 &&\r\n      [\"choice\", \"inherit\"].includes(deal_type.toLocaleLowerCase())\r\n    ) {\r\n      formIsValid = false;\r\n      errors[\"deal_values\"] = \"*Please type value for this field type.\";\r\n    }\r\n\r\n    this.setState({\r\n      errors: errors,\r\n    });\r\n    return formIsValid;\r\n  }\r\n\r\n  handleSelectChange3(event) {\r\n    console.log(\"handleInputChange3:\", event);\r\n    let values = [];\r\n    for (let i = 0; i < event.length; i++) {\r\n      let data = event[i];\r\n      values.push({ value: data.value, ref: data.ref });\r\n    }\r\n    this.setState({\r\n      deal_values: values,\r\n    });\r\n  }\r\n\r\n  handleDealDelete = (id, slug) => (e) => {\r\n    this.setState({ dealDeleteModal: true, selectedId: id });\r\n  };\r\n  closeDealDeleteModal = (e) => {\r\n    this.setState({ dealDeleteModal: false });\r\n  };\r\n  openDealDeleteMoal = (e) => {\r\n    this.setState({ dealDeleteModal: true });\r\n  };\r\n  confirmDealDelete = (e) => {\r\n    this.props.deleteDeal(this.state.selectedId, this.props);\r\n    this.setState({ dealDeleteModal: false, selectedId: \"\" });\r\n  };\r\n\r\n  editStage = (id, old_data) => (event) => {\r\n    // console.log(`id :${id} | name : ${event.target.name} | value : ${event.target.value} | old_data : ${name}`);\r\n    let { type, name, value, checked } = event.target;\r\n    console.log(\r\n      `type:${type}, name:${name}, value:${value}, checked:${checked} `\r\n    );\r\n\r\n    if (!value.trim()) {\r\n      event.target.value = old_data;\r\n      value = old_data;\r\n    }\r\n\r\n    this.setState({\r\n      [name]: value,\r\n      selectedId: id,\r\n    });\r\n  };\r\n\r\n  updateStageWith = (e) => {\r\n    console.log(\"updateStageWith\");\r\n    const { selectedId, stage_title, stage_color } = this.state;\r\n    console.log(\r\n      `selectedId : ${selectedId} | stage_title : ${stage_title} | stage_color : ${stage_color}`\r\n    );\r\n\r\n    if (selectedId && (stage_title || stage_color)) {\r\n      var current_user = this.props.auth_user ? this.props.auth_user._id : \"\";\r\n      var formData = {\r\n        user: current_user,\r\n        stage: selectedId,\r\n        name: stage_title,\r\n        color: stage_color,\r\n      };\r\n      const config = {\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n      };\r\n      this.props.updateStage(formData, config, this.props);\r\n    }\r\n  };\r\n\r\n  // Edit Organization\r\n  handleOrgEdit = (org) => async (e) => {\r\n    this.setState({\r\n      org_column: org.column_name,\r\n      org_editable: org.is_editable,\r\n      org_sortable: org.is_sortable,\r\n      org_filterable: org.is_filterable,\r\n      org_required: org.is_required,\r\n      org_position: org.position,\r\n      org_type: org.column_type,\r\n      org_values: org.values,\r\n      organizationEditModal: true,\r\n      selectedId: org._id,\r\n    });\r\n  };\r\n\r\n  // Update Org\r\n  onOrgEditSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (this.validateOrgForm()) {\r\n      var current_user = this.props.auth_user ? this.props.auth_user._id : \"\";\r\n      const {\r\n        org_column,\r\n        org_editable,\r\n        org_sortable,\r\n        org_filterable,\r\n        org_required,\r\n        org_position,\r\n        org_type,\r\n        org_values,\r\n        selectedId,\r\n      } = this.state;\r\n\r\n      var formData = {\r\n        user: current_user,\r\n        table_name: \"Organization\",\r\n        slug_name: \"org\",\r\n        column_name: org_column.trim(),\r\n        column_type: org_type,\r\n        is_editable: org_editable,\r\n        is_sortable: org_sortable,\r\n        is_filterable: org_filterable,\r\n        is_required: org_required,\r\n        position: org_position,\r\n        values: org_values,\r\n        _id: selectedId,\r\n      };\r\n\r\n      console.log(\"formData:\", formData);\r\n\r\n      const config = {\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      this.props.updateOrganisation(formData, config, this.props);\r\n      this.setState({\r\n        organizationEditModal: false,\r\n        org_column: \"\",\r\n        org_editable: false,\r\n        org_sortable: false,\r\n        org_filterable: false,\r\n        org_required: false,\r\n        org_position: this.props.organisations.length + 1,\r\n        org_type: \"Text\",\r\n        org_values: [],\r\n        selectedId: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Edit Contact\r\n  handleContactEdit = (contact) => async (e) => {\r\n    this.setState({\r\n      contact_column: contact.column_name,\r\n      contact_editable: contact.is_editable,\r\n      contact_sortable: contact.is_sortable,\r\n      contact_filterable: contact.is_filterable,\r\n      contact_required: contact.is_required,\r\n      contact_position: contact.position,\r\n      contact_type: contact.column_type,\r\n      contact_values: contact.values,\r\n      contactEditModal: true,\r\n      selectedId: contact._id,\r\n    });\r\n  };\r\n\r\n  // Update Contact\r\n  onContactEditSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.validateContactForm()) {\r\n      var current_user = this.props.auth_user ? this.props.auth_user._id : \"\";\r\n      const {\r\n        contact_column,\r\n        contact_editable,\r\n        contact_sortable,\r\n        contact_filterable,\r\n        contact_required,\r\n        contact_position,\r\n        contact_type,\r\n        contact_values,\r\n        selectedId,\r\n      } = this.state;\r\n\r\n      var formData = {\r\n        user: current_user,\r\n        table_name: \"Contact\",\r\n        slug_name: \"contact\",\r\n        column_name: contact_column.trim(),\r\n        column_type: contact_type,\r\n        is_editable: contact_editable,\r\n        is_sortable: contact_sortable,\r\n        is_filterable: contact_filterable,\r\n        is_required: contact_required,\r\n        position: contact_position,\r\n        values: contact_values,\r\n        _id: selectedId,\r\n      };\r\n\r\n      console.log(\"formData:\", formData);\r\n\r\n      const config = {\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      this.props.updateContact(formData, config, this.props);\r\n      this.setState({\r\n        contactEditModal: false,\r\n        contact_column: \"\",\r\n        contact_editable: false,\r\n        contact_sortable: false,\r\n        contact_filterable: false,\r\n        contact_required: false,\r\n        contact_position: this.props.contacts.length + 1,\r\n        contact_type: \"Text\",\r\n        contact_values: [],\r\n        selectedId: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  // Edit Deal\r\n  handleDealEdit = (deal) => async (e) => {\r\n    this.setState({\r\n      deal_column: deal.column_name,\r\n      deal_editable: deal.is_editable,\r\n      deal_sortable: deal.is_sortable,\r\n      deal_filterable: deal.is_filterable,\r\n      deal_required: deal.is_required,\r\n      deal_position: deal.position,\r\n      deal_type: deal.column_type,\r\n      deal_values: deal.values,\r\n      dealEditModal: true,\r\n      selectedId: deal._id,\r\n    });\r\n  };\r\n\r\n  // Update Deal\r\n  onDealEditSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (this.validateDealForm()) {\r\n      var current_user = this.props.auth_user ? this.props.auth_user._id : \"\";\r\n      const {\r\n        deal_column,\r\n        deal_editable,\r\n        deal_sortable,\r\n        deal_filterable,\r\n        deal_required,\r\n        deal_position,\r\n        deal_type,\r\n        deal_values,\r\n        selectedId,\r\n      } = this.state;\r\n\r\n      var formData = {\r\n        user: current_user,\r\n        table_name: \"Deal\",\r\n        slug_name: \"deal\",\r\n        column_name: deal_column.trim(),\r\n        column_type: deal_type,\r\n        is_editable: deal_editable,\r\n        is_sortable: deal_sortable,\r\n        is_filterable: deal_filterable,\r\n        is_required: deal_required,\r\n        position: deal_position,\r\n        values: deal_values,\r\n        _id: selectedId,\r\n      };\r\n\r\n      console.log(\"formData:\", formData);\r\n\r\n      const config = {\r\n        headers: {\r\n          \"content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      this.props.updateDeal(formData, config, this.props);\r\n      this.setState({\r\n        dealEditModal: false,\r\n        deal_column: \"\",\r\n        deal_editable: false,\r\n        deal_sortable: false,\r\n        deal_filterable: false,\r\n        deal_required: false,\r\n        deal_position: this.props.deals.length + 1,\r\n        deal_type: \"Text\",\r\n        deal_values: [],\r\n        selectedId: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  handleOnDragEnd_2 = async (result) => {\r\n    if (!result.destination || result.source.index === result.destination.index)\r\n      return;\r\n    console.log(\"handleOnDragEnd_2s:\", result);\r\n    let changedFrom = result.source.droppableId;\r\n    var formData = {\r\n      fieldId: result.draggableId,\r\n      last_position: result.source.index,\r\n      current_position: result.destination.index,\r\n      slug_name:(changedFrom == 'org_table') ? \"org\" : ((changedFrom == 'contact_table') ? \"contact\" : ((changedFrom == 'deal_table') ? \"deal\" : \"\")),\r\n    };\r\n    const config = {\r\n      headers: {\r\n        \"content-type\": \"application/json\",\r\n      },\r\n    };\r\n    console.log(\"formData:\", formData, \" config:\", config);\r\n    await this.props.changeFieldPosition(formData, config, this.props);\r\n    if (changedFrom == \"org_table\") {\r\n      await this.props.getOrganisations();\r\n    } else if (changedFrom == \"contact_table\") {\r\n      await this.props.getContacts();\r\n    } else if (changedFrom == \"deal_table\") {\r\n      await this.props.getDeals();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      stage_title,\r\n      stage_color,\r\n      org_column,\r\n      org_position,\r\n      contact_column,\r\n      contact_position,\r\n      deal_column,\r\n      deal_position,\r\n    } = this.state;\r\n    return (\r\n      <>\r\n        <Helmet>\r\n          <title>Configuration</title>\r\n        </Helmet>\r\n        <Layout title=\"Fields Setting\">\r\n          <div className=\"container-fluid\">\r\n            {/* Page Heading */}\r\n            {/* Content Row */}\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-12\">\r\n                {/* Overflow Hidden */}\r\n                <div className=\"card shadow mb-4\">\r\n                  <div className=\"card-header py-3\">\r\n                    <h6 className=\"m-0 font-weight-bold text-primary\">\r\n                      Sales Board\r\n                    </h6>\r\n                  </div>\r\n\r\n                  <DragDropContext onDragEnd={this.handleOnDragEnd.bind(this)}>\r\n                    <div className=\"card-body stageCard\">\r\n                      <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n                        {(provided) => (\r\n                          <div\r\n                            // className=\"row\"\r\n                            style={stageMain}\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                          >\r\n                            {this.props.stages.map(\r\n                              ({ _id, name, color, position }, index) => (\r\n                                <Draggable\r\n                                  key={_id}\r\n                                  draggableId={_id}\r\n                                  index={position}\r\n                                >\r\n                                  {(provided, snapshot) => (\r\n                                    <div\r\n                                      className=\"col-lg-2 col-sm-4 col-xs-12 mb-3\"\r\n                                      ref={provided.innerRef}\r\n                                      {...provided.draggableProps}\r\n                                      {...provided.dragHandleProps}\r\n                                      style={getItemStyle(\r\n                                        snapshot.isDragging,\r\n                                        provided.draggableProps.style\r\n                                      )}\r\n                                    >\r\n                                      <div className=\"sales-board-stage-card-title mb-2\">\r\n                                        Stage {index + 1}\r\n                                        <i\r\n                                          className=\"fa fa-trash float-right\"\r\n                                          style={{\r\n                                            cursor: \"pointer\",\r\n                                            color: \"red\",\r\n                                            position: \"relative\",\r\n                                            top: \"6px\",\r\n                                          }}\r\n                                          onClick={this.handleStageDelete(_id)}\r\n                                        />\r\n                                      </div>\r\n                                      <div className=\"card border-bottom-secondary\">\r\n                                        <div className=\"card-body sales-board-stage-card-body\">\r\n                                          <div className=\"row no-gutters align-items-center\">\r\n                                            <form className=\"w-100\">\r\n                                              <div className=\"mb-2\">\r\n                                                <label\r\n                                                  htmlFor=\"\"\r\n                                                  className=\"form-label\"\r\n                                                >\r\n                                                  Name\r\n                                                </label>\r\n                                                <input\r\n                                                  type=\"text\"\r\n                                                  className=\"form-control height-30px\"\r\n                                                  defaultValue={name}\r\n                                                  name=\"stage_title\"\r\n                                                  onBlur={this.updateStageWith.bind(\r\n                                                    this\r\n                                                  )}\r\n                                                  onChange={this.editStage(\r\n                                                    _id,\r\n                                                    name\r\n                                                  )}\r\n                                                />\r\n                                              </div>\r\n                                              <div className=\"mb-2\">\r\n                                                <label\r\n                                                  htmlFor=\"\"\r\n                                                  className=\"form-label\"\r\n                                                >\r\n                                                  Color\r\n                                                </label>\r\n                                                <input\r\n                                                  type=\"color\"\r\n                                                  className=\"form-control height-30px\"\r\n                                                  defaultValue={color}\r\n                                                  name=\"stage_color\"\r\n                                                  onBlur={this.updateStageWith.bind(\r\n                                                    this\r\n                                                  )}\r\n                                                  onChange={this.editStage(\r\n                                                    _id,\r\n                                                    name\r\n                                                  )}\r\n                                                />\r\n                                              </div>\r\n                                            </form>\r\n                                          </div>\r\n                                        </div>\r\n                                      </div>\r\n                                    </div>\r\n                                  )}\r\n                                </Draggable>\r\n                              )\r\n                            )}\r\n                            {provided.placeholder}\r\n                            <div className=\"col-xl-2 col-md-4 mb-3\">\r\n                              <div\r\n                                style={{ position: \"relative\", top: \"18px\" }}\r\n                                className=\"sales-board-stage-card-title text-center\"\r\n                              >\r\n                                Stage {this.props.stages.length + 1}\r\n                              </div>\r\n                              <div\r\n                                style={{ marginTop: \"50px\", cursor: \"pointer\" }}\r\n                                className=\"text-center\"\r\n                              >\r\n                                <a\r\n                                  onClick={(e) =>\r\n                                    this.setState({ stagesModal: true })\r\n                                  }\r\n                                >\r\n                                  <img\r\n                                    style={{ height: \"50px\" }}\r\n                                    className=\"rounded\"\r\n                                    src={`assets/img/plus_inside_circle_370092.png`}\r\n                                    alt=\"user\"\r\n                                  />\r\n                                </a>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                      </Droppable>\r\n                    </div>\r\n                  </DragDropContext>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-12\">\r\n                {/* Overflow Hidden */}\r\n                <div className=\"card shadow mb-4\">\r\n                  <div className=\"card-header py-3\">\r\n                    <h6 className=\"m-0 font-weight-bold text-primary\">\r\n                      Organizations\r\n                    </h6>\r\n                  </div>\r\n                  <div className=\"card-body\">\r\n                    <div className=\"table-responsive\">\r\n                      <table\r\n                        className=\"table table-bordered\"\r\n                        id=\"dataTable\"\r\n                        width=\"100%\"\r\n                        cellSpacing={0}\r\n                      >\r\n                        <thead>\r\n                          <tr>\r\n                            <th width=\"2%\" />\r\n                            <th>Column</th>\r\n                            <th>Position</th>\r\n                            <th>Editable</th>\r\n                            <th>Sortable</th>\r\n                            <th>Filterable</th>\r\n                            <th>Required</th>\r\n                            <th>Type</th>\r\n                            <th>Values</th>\r\n                            <th width=\"2%\" />\r\n                            <th width=\"2%\" />\r\n                          </tr>\r\n                        </thead>\r\n                        <DragDropContext\r\n                          onDragEnd={this.handleOnDragEnd_2.bind(this)}\r\n                        >\r\n                          <Droppable droppableId=\"org_table\">\r\n                            {(provided) => (\r\n                              <tbody\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                              >\r\n                                {this.props.organisations &&\r\n                                this.props.organisations.length > 0 ? (\r\n                                  this.props.organisations.map(\r\n                                    (organisation, index) => (\r\n                                      <Draggable\r\n                                        key={organisation._id}\r\n                                        draggableId={organisation._id}\r\n                                        index={organisation.position}\r\n                                      >\r\n                                        {(provided, snapshot) => (\r\n                                          <tr\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getTableRowStyle(\r\n                                              snapshot.isDragging,\r\n                                              provided.draggableProps.style\r\n                                            )}\r\n                                          >\r\n                                            <td className=\"text-center\">\r\n                                              <label className=\"checkbox-label\">\r\n                                                <input\r\n                                                  type=\"checkbox\"\r\n                                                  onChange={(e) =>\r\n                                                    console.log(e)\r\n                                                  }\r\n                                                />\r\n                                                <span className=\"geekmark\" />\r\n                                              </label>\r\n                                            </td>\r\n                                            <td style={{ width: \"150px\" }}>\r\n                                              {organisation.column_name}\r\n                                            </td>\r\n                                            <td style={{ width: \"150px\" }}>\r\n                                              {organisation.position}\r\n                                            </td>\r\n                                            <td style={{ width: \"150px\" }}>\r\n                                              <label className=\"checkbox-label\">\r\n                                                <input\r\n                                                  type=\"checkbox\"\r\n                                                  name=\"editable\"\r\n                                                  checked={\r\n                                                    organisation.is_editable\r\n                                                  }\r\n                                                  onChange={() => {}}\r\n                                                />\r\n                                                <span className=\"geekmark\" />\r\n                                              </label>\r\n                                            </td>\r\n                                            <td style={{ width: \"150px\" }}>\r\n                                              <label className=\"checkbox-label\">\r\n                                                <input\r\n                                                  type=\"checkbox\"\r\n                                                  name=\"sortable\"\r\n                                                  checked={\r\n                                                    organisation.is_sortable\r\n                                                  }\r\n                                                  onChange={() => {}}\r\n                                                />\r\n                                                <span className=\"geekmark\" />\r\n                                              </label>\r\n                                            </td>\r\n                                            <td style={{ width: \"150px\" }}>\r\n                                              <label className=\"checkbox-label\">\r\n                                                <input\r\n                                                  type=\"checkbox\"\r\n                                                  name=\"filterable\"\r\n                                                  checked={\r\n                                                    organisation.is_filterable\r\n                                                  }\r\n                                                  onChange={() => {}}\r\n                                                />\r\n                                                <span className=\"geekmark\" />\r\n                                              </label>\r\n                                            </td>\r\n                                            <td style={{ width: \"150px\" }}>\r\n                                              <label className=\"checkbox-label\">\r\n                                                <input\r\n                                                  type=\"checkbox\"\r\n                                                  name=\"required\"\r\n                                                  checked={\r\n                                                    organisation.is_required\r\n                                                  }\r\n                                                  onChange={() => {}}\r\n                                                />\r\n                                                <span className=\"geekmark\" />\r\n                                              </label>\r\n                                            </td>\r\n                                            <td style={{ width: \"100px\" }}>\r\n                                              {organisation.column_type}\r\n                                            </td>\r\n                                            <td style={{ width: \"300px\" }}>\r\n                                              {organisation.values &&\r\n                                              organisation.values.length > 0\r\n                                                ? organisation.values.map(\r\n                                                    (value, index) =>\r\n                                                      value[\"label\"] +\r\n                                                      (organisation.values\r\n                                                        .length ===\r\n                                                      index + 1\r\n                                                        ? \"\"\r\n                                                        : \", \")\r\n                                                  )\r\n                                                : null}\r\n                                            </td>\r\n                                            <td\r\n                                              style={{ width: \"30px\" }}\r\n                                              className=\"text-center\"\r\n                                            >\r\n                                              <i\r\n                                                onClick={this.handleOrgEdit(\r\n                                                  organisation\r\n                                                )}\r\n                                                className=\"fa fa-edit\"\r\n                                                style={{\r\n                                                  cursor: \"pointer\",\r\n                                                  color: \"blue\",\r\n                                                }}\r\n                                              />\r\n                                            </td>\r\n                                            <td\r\n                                              style={{ width: \"30px\" }}\r\n                                              className=\"text-center\"\r\n                                            >\r\n                                              <i\r\n                                                onClick={this.handleOrgDelete(\r\n                                                  organisation._id\r\n                                                )}\r\n                                                className=\"fa fa-trash\"\r\n                                                style={{\r\n                                                  cursor: \"pointer\",\r\n                                                  color: \"red\",\r\n                                                }}\r\n                                              />\r\n                                            </td>\r\n                                          </tr>\r\n                                        )}\r\n                                      </Draggable>\r\n                                    )\r\n                                  )\r\n                                ) : (\r\n                                  <tr>\r\n                                    <td className=\"text-center\" colSpan=\"10\">\r\n                                      No Records\r\n                                    </td>\r\n                                  </tr>\r\n                                )}\r\n                                {provided.placeholder}\r\n                              </tbody>\r\n                            )}\r\n                          </Droppable>\r\n                        </DragDropContext>\r\n                      </table>\r\n                    </div>\r\n                    <div>\r\n                      <a\r\n                        onClick={(e) =>\r\n                          this.setState({ organizationModal: true })\r\n                        }\r\n                      >\r\n                        <img\r\n                          style={{ height: \"30px\", cursor: \"pointer\" }}\r\n                          className=\"rounded\"\r\n                          src={`assets/img/plus_inside_circle_370092.png`}\r\n                          alt=\"user\"\r\n                        />\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-12\">\r\n                {/* Overflow Hidden */}\r\n                <div className=\"card shadow mb-4\">\r\n                  <div className=\"card-header py-3\">\r\n                    <h6 className=\"m-0 font-weight-bold text-primary\">\r\n                      Contacts\r\n                    </h6>\r\n                  </div>\r\n                  <div className=\"card-body\">\r\n                    <div className=\"table-responsive\">\r\n                      <table\r\n                        className=\"table table-bordered\"\r\n                        id=\"dataTable\"\r\n                        width=\"100%\"\r\n                        cellSpacing={0}\r\n                      >\r\n                        <thead>\r\n                          <tr>\r\n                            <th width=\"2%\" />\r\n                            <th>Column</th>\r\n                            <th>Position</th>\r\n                            <th>Editable</th>\r\n                            <th>Sortable</th>\r\n                            <th>Filterable</th>\r\n                            <th>Required</th>\r\n                            <th>Type</th>\r\n                            <th>Values</th>\r\n                            <th width=\"2%\" />\r\n                            <th width=\"2%\" />\r\n                          </tr>\r\n                        </thead>\r\n                        <DragDropContext\r\n                          onDragEnd={this.handleOnDragEnd_2.bind(this)}\r\n                        >\r\n                          <Droppable droppableId=\"contact_table\">\r\n                            {(provided) => (\r\n                              <tbody\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                              >\r\n                                {this.props.contacts &&\r\n                                this.props.contacts.length > 0 ? (\r\n                                  this.props.contacts.map((contact, index) => (\r\n                                    <Draggable\r\n                                      key={contact._id}\r\n                                      draggableId={contact._id}\r\n                                      index={contact.position}\r\n                                    >\r\n                                      {(provided, snapshot) => (\r\n                                        <tr\r\n                                          ref={provided.innerRef}\r\n                                          {...provided.draggableProps}\r\n                                          {...provided.dragHandleProps}\r\n                                          style={getTableRowStyle(\r\n                                            snapshot.isDragging,\r\n                                            provided.draggableProps.style\r\n                                          )}\r\n                                        >\r\n                                          <td className=\"text-center\">\r\n                                            <label className=\"checkbox-label\">\r\n                                              <input type=\"checkbox\" />\r\n                                              <span className=\"geekmark\" />\r\n                                            </label>\r\n                                          </td>\r\n                                          <td style={{ width: \"150px\" }}>\r\n                                            {contact.column_name}\r\n                                          </td>\r\n                                          <td style={{ width: \"150px\" }}>\r\n                                            {contact.position}\r\n                                          </td>\r\n                                          <td style={{ width: \"150px\" }}>\r\n                                            <label className=\"checkbox-label\">\r\n                                              <input\r\n                                                type=\"checkbox\"\r\n                                                name=\"editable\"\r\n                                                checked={contact.is_editable}\r\n                                                onChange={() => {}}\r\n                                              />\r\n                                              <span className=\"geekmark\" />\r\n                                            </label>\r\n                                          </td>\r\n                                          <td style={{ width: \"150px\" }}>\r\n                                            <label className=\"checkbox-label\">\r\n                                              <input\r\n                                                type=\"checkbox\"\r\n                                                name=\"sortable\"\r\n                                                checked={contact.is_sortable}\r\n                                                onChange={() => {}}\r\n                                              />\r\n                                              <span className=\"geekmark\" />\r\n                                            </label>\r\n                                          </td>\r\n                                          <td style={{ width: \"150px\" }}>\r\n                                            <label className=\"checkbox-label\">\r\n                                              <input\r\n                                                type=\"checkbox\"\r\n                                                name=\"filterable\"\r\n                                                checked={contact.is_filterable}\r\n                                                onChange={() => {}}\r\n                                              />\r\n                                              <span className=\"geekmark\" />\r\n                                            </label>\r\n                                          </td>\r\n                                          <td style={{ width: \"150px\" }}>\r\n                                            <label className=\"checkbox-label\">\r\n                                              <input\r\n                                                type=\"checkbox\"\r\n                                                name=\"required\"\r\n                                                checked={contact.is_required}\r\n                                                onChange={() => {}}\r\n                                              />\r\n                                              <span className=\"geekmark\" />\r\n                                            </label>\r\n                                          </td>\r\n                                          <td style={{ width: \"100px\" }}>\r\n                                            {contact.column_type}\r\n                                          </td>\r\n                                          <td style={{ width: \"300px\" }}>\r\n                                            {contact.values &&\r\n                                            contact.values.length > 0\r\n                                              ? contact.values.map(\r\n                                                  (value, index) =>\r\n                                                    value[\"label\"] +\r\n                                                    (contact.values.length ===\r\n                                                    index + 1\r\n                                                      ? \"\"\r\n                                                      : \", \")\r\n                                                )\r\n                                              : null}\r\n                                          </td>\r\n\r\n                                          <td\r\n                                            style={{ width: \"30px\" }}\r\n                                            className=\"text-center\"\r\n                                          >\r\n                                            <i\r\n                                              onClick={this.handleContactEdit(\r\n                                                contact\r\n                                              )}\r\n                                              className=\"fa fa-edit\"\r\n                                              style={{\r\n                                                cursor: \"pointer\",\r\n                                                color: \"blue\",\r\n                                              }}\r\n                                            />\r\n                                          </td>\r\n                                          <td\r\n                                            style={{ width: \"30px\" }}\r\n                                            className=\"text-center\"\r\n                                          >\r\n                                            <i\r\n                                              onClick={this.handleContactDelete(\r\n                                                contact._id,\r\n                                                contact.slug\r\n                                              )}\r\n                                              className=\"fa fa-trash\"\r\n                                              style={{\r\n                                                cursor: \"pointer\",\r\n                                                color: \"red\",\r\n                                              }}\r\n                                            />\r\n                                          </td>\r\n                                        </tr>\r\n                                      )}\r\n                                    </Draggable>\r\n                                  ))\r\n                                ) : (\r\n                                  <tr>\r\n                                    <td className=\"text-center\" colSpan=\"10\">\r\n                                      No Records\r\n                                    </td>\r\n                                  </tr>\r\n                                )}\r\n                                {provided.placeholder}\r\n                              </tbody>\r\n                            )}\r\n                          </Droppable>\r\n                        </DragDropContext>\r\n                      </table>\r\n                    </div>\r\n                    <div>\r\n                      <a onClick={(e) => this.setState({ contactModal: true })}>\r\n                        <img\r\n                          style={{ height: \"30px\", cursor: \"pointer\" }}\r\n                          className=\"rounded\"\r\n                          src={`assets/img/plus_inside_circle_370092.png`}\r\n                          alt=\"user\"\r\n                        />\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-12\">\r\n                <div className=\"card shadow mb-4\">\r\n                  <div className=\"card-header py-3\">\r\n                    <h6 className=\"m-0 font-weight-bold text-primary\">Deals</h6>\r\n                  </div>\r\n                  <div className=\"card-body\">\r\n                    <div className=\"table-responsive\">\r\n                      <table\r\n                        className=\"table table-bordered\"\r\n                        id=\"dataTable\"\r\n                        width=\"100%\"\r\n                        cellSpacing={0}\r\n                      >\r\n                        <thead>\r\n                          <tr>\r\n                            <th width=\"2%\" />\r\n                            <th>Column</th>\r\n                            <th>Position</th>\r\n                            <th>Editable</th>\r\n                            <th>Sortable</th>\r\n                            <th>Filterable</th>\r\n                            <th>Required</th>\r\n                            <th>Type</th>\r\n                            <th>Values</th>\r\n                            <th width=\"2%\" />\r\n                            <th width=\"2%\" />\r\n                          </tr>\r\n                        </thead>\r\n                        <DragDropContext\r\n                          onDragEnd={this.handleOnDragEnd_2.bind(this)}\r\n                        >\r\n                          <Droppable droppableId=\"deal_table\">\r\n                            {(provided) => (\r\n                              <tbody\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                              >\r\n                                {this.props.deals &&\r\n                                this.props.deals.length > 0 ? (\r\n                                  this.props.deals.map((deal, index) => (\r\n                                    <Draggable\r\n                                      key={deal._id}\r\n                                      draggableId={deal._id}\r\n                                      index={deal.position}\r\n                                    >\r\n                                      {(provided, snapshot) => (\r\n                                        <tr\r\n                                          ref={provided.innerRef}\r\n                                          {...provided.draggableProps}\r\n                                          {...provided.dragHandleProps}\r\n                                          style={getTableRowStyle(\r\n                                            snapshot.isDragging,\r\n                                            provided.draggableProps.style\r\n                                          )}\r\n                                        >\r\n                                          <td className=\"text-center\">\r\n                                            <label className=\"checkbox-label\">\r\n                                              <input type=\"checkbox\" />\r\n                                              <span className=\"geekmark\" />\r\n                                            </label>\r\n                                          </td>\r\n                                          <td style={{ width: \"150px\" }}>\r\n                                            {deal.column_name}\r\n                                          </td>\r\n                                          <td style={{ width: \"150px\" }}>\r\n                                            {deal.position}\r\n                                          </td>\r\n                                          <td style={{ width: \"150px\" }}>\r\n                                            <label className=\"checkbox-label\">\r\n                                              <input\r\n                                                type=\"checkbox\"\r\n                                                name=\"editable\"\r\n                                                checked={deal.is_editable}\r\n                                                onChange={() => {}}\r\n                                              />\r\n                                              <span className=\"geekmark\" />\r\n                                            </label>\r\n                                          </td>\r\n                                          <td style={{ width: \"150px\" }}>\r\n                                            <label className=\"checkbox-label\">\r\n                                              <input\r\n                                                type=\"checkbox\"\r\n                                                name=\"sortable\"\r\n                                                checked={deal.is_sortable}\r\n                                                onChange={() => {}}\r\n                                              />\r\n                                              <span className=\"geekmark\" />\r\n                                            </label>\r\n                                          </td>\r\n                                          <td style={{ width: \"150px\" }}>\r\n                                            <label className=\"checkbox-label\">\r\n                                              <input\r\n                                                type=\"checkbox\"\r\n                                                name=\"filterable\"\r\n                                                checked={deal.is_filterable}\r\n                                                onChange={() => {}}\r\n                                              />\r\n                                              <span className=\"geekmark\" />\r\n                                            </label>\r\n                                          </td>\r\n                                          <td style={{ width: \"150px\" }}>\r\n                                            <label className=\"checkbox-label\">\r\n                                              <input\r\n                                                type=\"checkbox\"\r\n                                                name=\"required\"\r\n                                                checked={deal.is_required}\r\n                                                onChange={() => {}}\r\n                                              />\r\n                                              <span className=\"geekmark\" />\r\n                                            </label>\r\n                                          </td>\r\n                                          <td style={{ width: \"100px\" }}>\r\n                                            {deal.column_type}\r\n                                          </td>\r\n                                          <td style={{ width: \"300px\" }}>\r\n                                            {deal.values &&\r\n                                            deal.values.length > 0\r\n                                              ? deal.values.map(\r\n                                                  (value, index) =>\r\n                                                    value[\"label\"] +\r\n                                                    (deal.values.length ===\r\n                                                    index + 1\r\n                                                      ? \"\"\r\n                                                      : \", \")\r\n                                                )\r\n                                              : null}\r\n                                          </td>\r\n                                          <td\r\n                                            style={{ width: \"30px\" }}\r\n                                            className=\"text-center\"\r\n                                          >\r\n                                            <i\r\n                                              onClick={this.handleDealEdit(\r\n                                                deal\r\n                                              )}\r\n                                              className=\"fa fa-edit\"\r\n                                              style={{\r\n                                                cursor: \"pointer\",\r\n                                                color: \"blue\",\r\n                                              }}\r\n                                            />\r\n                                          </td>\r\n                                          <td\r\n                                            style={{ width: \"30px\" }}\r\n                                            className=\"text-center\"\r\n                                          >\r\n                                            <i\r\n                                              onClick={this.handleDealDelete(\r\n                                                deal._id,\r\n                                                deal.slug\r\n                                              )}\r\n                                              className=\"fa fa-trash\"\r\n                                              style={{\r\n                                                cursor: \"pointer\",\r\n                                                color: \"red\",\r\n                                              }}\r\n                                            />\r\n                                          </td>\r\n                                        </tr>\r\n                                      )}\r\n                                    </Draggable>\r\n                                  ))\r\n                                ) : (\r\n                                  <tr>\r\n                                    <td className=\"text-center\" colSpan=\"10\">\r\n                                      No Records\r\n                                    </td>\r\n                                  </tr>\r\n                                )}\r\n                                {provided.placeholder}\r\n                              </tbody>\r\n                            )}\r\n                          </Droppable>\r\n                        </DragDropContext>\r\n                      </table>\r\n                    </div>\r\n                    <div>\r\n                      <a onClick={(e) => this.setState({ dealModal: true })}>\r\n                        <img\r\n                          style={{ height: \"30px\", cursor: \"pointer\" }}\r\n                          className=\"rounded\"\r\n                          src={`assets/img/plus_inside_circle_370092.png`}\r\n                          alt=\"user\"\r\n                        />\r\n                      </a>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Delete Stage Modal */}\r\n          <Modal\r\n            show={this.state.stageDeleteModal}\r\n            onHide={this.closeStageDeleteModal}\r\n            centered\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n          >\r\n            <Modal.Body>\r\n              <div className=\"delete-popup\">\r\n                <div\r\n                  className=\"close-icon\"\r\n                  onClick={this.closeStageDeleteModal}\r\n                >\r\n                  <i className=\"fa fa-times\" />\r\n                </div>\r\n                <div className=\"delete-popup-img\" />\r\n                <div className=\"delete-popup-heading\">Delete Permanently</div>\r\n                <div className=\"delete-popup-subheading\">\r\n                  Are you sure you want permanently delete these record(s) from\r\n                  your list?\r\n                </div>\r\n                <div className=\"mt-3\">\r\n                  <button\r\n                    className=\"btn btn-sm btn-primary\"\r\n                    onClick={this.confirmStageDelete}\r\n                  >\r\n                    Yes, Delete\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </Modal.Body>\r\n          </Modal>\r\n          {/* Delete Org Modal */}\r\n          <Modal\r\n            show={this.state.organizationDeleteModal}\r\n            onHide={this.closeOrgDeleteModal}\r\n            centered\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n          >\r\n            <Modal.Body>\r\n              <div className=\"delete-popup\">\r\n                <div className=\"close-icon\" onClick={this.closeOrgDeleteModal}>\r\n                  <i className=\"fa fa-times\" />\r\n                </div>\r\n                <div className=\"delete-popup-img\" />\r\n                <div className=\"delete-popup-heading\">Delete Permanently</div>\r\n                <div className=\"delete-popup-subheading\">\r\n                  Are you sure you want permanently delete these record(s) from\r\n                  your list?\r\n                </div>\r\n                <div className=\"mt-3\">\r\n                  <button\r\n                    className=\"btn btn-sm btn-primary\"\r\n                    onClick={this.confirmOrgDelete}\r\n                  >\r\n                    Yes, Delete\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </Modal.Body>\r\n          </Modal>\r\n          {/* Delete Contact Modal */}\r\n          <Modal\r\n            show={this.state.contactDeleteModal}\r\n            onHide={this.closeContactDeleteModal}\r\n            centered\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n          >\r\n            <Modal.Body>\r\n              <div className=\"delete-popup\">\r\n                <div\r\n                  className=\"close-icon\"\r\n                  onClick={this.closeContactDeleteModal}\r\n                >\r\n                  <i className=\"fa fa-times\" />\r\n                </div>\r\n                <div className=\"delete-popup-img\" />\r\n                <div className=\"delete-popup-heading\">Delete Permanently</div>\r\n                <div className=\"delete-popup-subheading\">\r\n                  Are you sure you want permanently delete these record(s) from\r\n                  your list?\r\n                </div>\r\n                <div className=\"mt-3\">\r\n                  <button\r\n                    className=\"btn btn-sm btn-primary\"\r\n                    onClick={this.confirmContactDelete}\r\n                  >\r\n                    Yes, Delete\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </Modal.Body>\r\n          </Modal>\r\n\r\n          {/* Delete Deal Modal */}\r\n          <Modal\r\n            show={this.state.dealDeleteModal}\r\n            onHide={this.closeDealDeleteModal}\r\n            centered\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n          >\r\n            <Modal.Body>\r\n              <div className=\"delete-popup\">\r\n                <div className=\"close-icon\" onClick={this.closeDealDeleteModal}>\r\n                  <i className=\"fa fa-times\" />\r\n                </div>\r\n                <div className=\"delete-popup-img\" />\r\n                <div className=\"delete-popup-heading\">Delete Permanently</div>\r\n                <div className=\"delete-popup-subheading\">\r\n                  Are you sure you want permanently delete these record(s) from\r\n                  your list?\r\n                </div>\r\n                <div className=\"mt-3\">\r\n                  <button\r\n                    className=\"btn btn-sm btn-primary\"\r\n                    onClick={this.confirmDealDelete}\r\n                  >\r\n                    Yes, Delete\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </Modal.Body>\r\n          </Modal>\r\n\r\n          {/* Stage Modal */}\r\n          <Modal\r\n            show={this.state.stagesModal}\r\n            onHide={(e) =>\r\n              this.setState({\r\n                stagesModal: false,\r\n                errors: {},\r\n                stage_title: \"\",\r\n                stage_color: \"\",\r\n              })\r\n            }\r\n            centered\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"md\"\r\n          >\r\n            <form className=\"w-100\" onSubmit={this.onStageSubmit}>\r\n              <Modal.Header closebutton=\"true\">\r\n                <Modal.Title>New Stage</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <div className=\"mb-2\">\r\n                  <label htmlFor=\"\" className=\"form-label\">\r\n                    Name\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control height-30px\"\r\n                    name=\"stage_title\"\r\n                    onChange={this.handleInputChange}\r\n                    value={stage_title}\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.stage_title}\r\n                  </div>\r\n                </div>\r\n                <div className=\"mb-2\">\r\n                  <label htmlFor=\"\" className=\"form-label\">\r\n                    Color\r\n                  </label>\r\n                  <input\r\n                    type=\"color\"\r\n                    className=\"form-control height-30px\"\r\n                    name=\"stage_color\"\r\n                    onChange={this.handleInputChange}\r\n                    value={stage_color}\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.stage_color}\r\n                  </div>\r\n                </div>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <button className=\"btn btn-md btn-primary mr-1\">Save</button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-md btn-secondary\"\r\n                  onClick={(e) =>\r\n                    this.setState({ stagesModal: false, errors: {} })\r\n                  }\r\n                >\r\n                  Close\r\n                </button>\r\n              </Modal.Footer>\r\n            </form>\r\n          </Modal>\r\n\r\n          {/* Organisation Modal */}\r\n          <Modal\r\n            show={this.state.organizationModal}\r\n            onHide={(e) =>\r\n              this.setState({\r\n                organizationModal: false,\r\n                errors: {},\r\n                org_column: \"\",\r\n                org_editable: false,\r\n                org_sortable: false,\r\n                org_filterable: false,\r\n                org_required: false,\r\n                org_position: this.props.organisations.length + 1,\r\n                org_type: \"Text\",\r\n                org_values: [],\r\n              })\r\n            }\r\n            centered\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"md\"\r\n          >\r\n            <form className=\"w-100\" onSubmit={this.onOrgSubmit}>\r\n              <Modal.Header closebutton=\"true\">\r\n                <Modal.Title>Add Organisation Field </Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Form.Group controlId=\"Column\">\r\n                  <Form.Label>Column</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    className=\"height-30px\"\r\n                    name=\"org_column\"\r\n                    onChange={this.handleInputChange}\r\n                    value={org_column}\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.org_column}\r\n                  </div>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Position\">\r\n                  <Form.Label>Position</Form.Label>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    className=\"height-30px\"\r\n                    name=\"org_position\"\r\n                    onChange={this.handleInputChange}\r\n                    value={org_position}\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.org_position}\r\n                  </div>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Editable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"org_editable\"\r\n                      value=\"editable\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Editable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Sortable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"org_sortable\"\r\n                      value=\"sortable\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Sortable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Filterable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"org_filterable\"\r\n                      value=\"filterable\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Filterable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Required\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"org_required\"\r\n                      value=\"required\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Required\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"optionType\">\r\n                  <Form.Label>Type</Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    size=\"sm\"\r\n                    name=\"org_type\"\r\n                    onChange={this.handleInputChange}\r\n                  >\r\n                    {fieldTypes && fieldTypes.length > 0\r\n                      ? fieldTypes.map(({ label, value }, index) => (\r\n                          <option key={index} value={value}>\r\n                            {label}\r\n                          </option>\r\n                        ))\r\n                      : null}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Values\">\r\n                  <Form.Label>Values</Form.Label>\r\n                  {/* <Form.Control type=\"text\" className=\"height-30px\" /> */}\r\n                  <Select\r\n                    isMulti\r\n                    // defaultValue={colourOptions[1]}\r\n                    options={this.state.groupedOptions}\r\n                    formatGroupLabel={formatGroupLabel}\r\n                    onChange={this.handleSelectChange}\r\n                    name=\"org_values\"\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.org_values}\r\n                  </div>\r\n                </Form.Group>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <button className=\"btn btn-md btn-primary  mr-1\">Save</button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-md btn-secondary\"\r\n                  onClick={(e) =>\r\n                    this.setState({\r\n                      organizationModal: false,\r\n                      errors: {},\r\n                      org_column: \"\",\r\n                      org_editable: false,\r\n                      org_sortable: false,\r\n                      org_filterable: false,\r\n                      org_required: false,\r\n                      org_position: this.props.organisations.length + 1,\r\n                      org_type: \"Text\",\r\n                      org_values: [],\r\n                    })\r\n                  }\r\n                >\r\n                  {\" \"}\r\n                  Close\r\n                </button>\r\n              </Modal.Footer>\r\n            </form>\r\n          </Modal>\r\n\r\n          {/* Organisation Edit Modal */}\r\n          <Modal\r\n            show={this.state.organizationEditModal}\r\n            onHide={(e) =>\r\n              this.setState({\r\n                organizationEditModal: false,\r\n                errors: {},\r\n                org_column: \"\",\r\n                org_editable: false,\r\n                org_sortable: false,\r\n                org_filterable: false,\r\n                org_required: false,\r\n                org_position: this.props.organisations.length + 1,\r\n                org_type: \"Text\",\r\n                org_values: [],\r\n              })\r\n            }\r\n            centered\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"md\"\r\n          >\r\n            <form className=\"w-100\" onSubmit={this.onOrgEditSubmit}>\r\n              <Modal.Header closebutton=\"true\">\r\n                <Modal.Title>Edit Organisation Field </Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Form.Group controlId=\"Column\">\r\n                  <Form.Label>Column</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    className=\"height-30px\"\r\n                    name=\"org_column\"\r\n                    // defaultValue={this.props.organisation_detail.column_name}\r\n                    value={this.state.org_column}\r\n                    onChange={this.handleInputChange}\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.org_column}\r\n                  </div>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Position\">\r\n                  <Form.Label>Position</Form.Label>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    className=\"height-30px\"\r\n                    name=\"org_position\"\r\n                    // defaultValue={this.props.organisation_detail.column_name}\r\n                    value={this.state.org_position}\r\n                    onChange={this.handleInputChange}\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.org_position}\r\n                  </div>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Editable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"org_editable\"\r\n                      checked={this.state.org_editable}\r\n                      value=\"editable\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Editable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Sortable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"org_sortable\"\r\n                      checked={this.state.org_sortable}\r\n                      value=\"sortable\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Sortable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Filterable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"org_filterable\"\r\n                      checked={this.state.org_filterable}\r\n                      value=\"filterable\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Filterable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Required\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"org_required\"\r\n                      checked={this.state.org_required}\r\n                      value=\"required\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Required\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"optionType\">\r\n                  <Form.Label>Type</Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    size=\"sm\"\r\n                    name=\"org_type\"\r\n                    onChange={this.handleInputChange}\r\n                    value={this.state.org_type}\r\n                  >\r\n                    {fieldTypes && fieldTypes.length > 0\r\n                      ? fieldTypes.map(({ label, value }, index) => (\r\n                          <option key={index} value={value}>\r\n                            {label}\r\n                          </option>\r\n                        ))\r\n                      : null}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Values\">\r\n                  <Form.Label>Values</Form.Label>\r\n                  <Select\r\n                    isMulti\r\n                    defaultValue={\r\n                      this.state.org_values ? this.state.org_values : []\r\n                    }\r\n                    options={this.state.groupedOptions}\r\n                    formatGroupLabel={formatGroupLabel}\r\n                    onChange={this.handleSelectChange}\r\n                    name=\"org_values\"\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.org_values}\r\n                  </div>\r\n                </Form.Group>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <button className=\"btn btn-md btn-primary   mr-1\">Save</button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-md btn-secondary\"\r\n                  onClick={(e) =>\r\n                    this.setState({\r\n                      organizationEditModal: false,\r\n                      errors: {},\r\n                      org_column: \"\",\r\n                      org_editable: false,\r\n                      org_sortable: false,\r\n                      org_filterable: false,\r\n                      org_required: false,\r\n                      org_position: this.props.organisations.length + 1,\r\n                      org_type: \"Text\",\r\n                      org_values: [],\r\n                    })\r\n                  }\r\n                >\r\n                  {\" \"}\r\n                  Close\r\n                </button>\r\n              </Modal.Footer>\r\n            </form>\r\n          </Modal>\r\n          {/* Contact Modal */}\r\n          <Modal\r\n            show={this.state.contactModal}\r\n            onHide={(e) =>\r\n              this.setState({\r\n                contactModal: false,\r\n                errors: {},\r\n                contact_column: \"\",\r\n                contact_editable: false,\r\n                contact_sortable: false,\r\n                contact_filterable: false,\r\n                contact_required: false,\r\n                contact_position: this.props.contacts.length + 1,\r\n                contact_type: \"Text\",\r\n                contact_values: [],\r\n              })\r\n            }\r\n            centered\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"md\"\r\n          >\r\n            <form className=\"w-100\" onSubmit={this.onContactSubmit}>\r\n              <Modal.Header closebutton=\"true\">\r\n                <Modal.Title>New Contact Field</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Form.Group controlId=\"Column\">\r\n                  <Form.Label>Column</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    className=\"height-30px\"\r\n                    name=\"contact_column\"\r\n                    onChange={this.handleInputChange}\r\n                    value={contact_column}\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.contact_column}\r\n                  </div>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Position\">\r\n                  <Form.Label>Position</Form.Label>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    className=\"height-30px\"\r\n                    name=\"contact_position\"\r\n                    onChange={this.handleInputChange}\r\n                    value={contact_position}\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.contact_position}\r\n                  </div>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Editable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"contact_editable\"\r\n                      value=\"editable\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Editable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Sortable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"contact_sortable\"\r\n                      value=\"sortable\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Sortable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Filterable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"contact_filterable\"\r\n                      value=\"filterable\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Filterable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Required\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"contact_required\"\r\n                      value=\"required\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Required\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"optionType\">\r\n                  <Form.Label>Type</Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    size=\"sm\"\r\n                    name=\"contact_type\"\r\n                    onChange={this.handleInputChange}\r\n                  >\r\n                    {fieldTypes && fieldTypes.length > 0\r\n                      ? fieldTypes.map(({ label, value }, index) => (\r\n                          <option key={index} value={value}>\r\n                            {label}\r\n                          </option>\r\n                        ))\r\n                      : null}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Values\">\r\n                  <Form.Label>Values</Form.Label>\r\n                  {/* <Form.Control type=\"text\" className=\"height-30px\" /> */}\r\n                  <Select\r\n                    isMulti\r\n                    options={this.state.groupedOptions}\r\n                    formatGroupLabel={formatGroupLabel}\r\n                    onChange={this.handleSelectChange2}\r\n                    name=\"contact_values\"\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.contact_values}\r\n                  </div>\r\n                </Form.Group>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <button className=\"btn btn-md btn-primary mr-1\">Save</button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-md btn-secondary\"\r\n                  onClick={(e) =>\r\n                    this.setState({\r\n                      contactModal: false,\r\n                      errors: {},\r\n                      contact_column: \"\",\r\n                      contact_editable: false,\r\n                      contact_sortable: false,\r\n                      contact_filterable: false,\r\n                      contact_required: false,\r\n                      contact_position: this.props.contacts.length + 1,\r\n                      contact_type: \"Text\",\r\n                      contact_values: [],\r\n                    })\r\n                  }\r\n                >\r\n                  {\" \"}\r\n                  Close\r\n                </button>\r\n              </Modal.Footer>\r\n            </form>\r\n          </Modal>\r\n\r\n          {/* Contact Edit Modal */}\r\n          <Modal\r\n            show={this.state.contactEditModal}\r\n            onHide={(e) =>\r\n              this.setState({\r\n                contactEditModal: false,\r\n                errors: {},\r\n                contact_column: \"\",\r\n                contact_editable: false,\r\n                contact_sortable: false,\r\n                contact_filterable: false,\r\n                contact_required: false,\r\n                contact_position: this.props.contacts.length + 1,\r\n                contact_type: \"Text\",\r\n                contact_values: [],\r\n              })\r\n            }\r\n            centered\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"md\"\r\n          >\r\n            <form className=\"w-100\" onSubmit={this.onContactEditSubmit}>\r\n              <Modal.Header closebutton=\"true\">\r\n                <Modal.Title>Edit Contact Field</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Form.Group controlId=\"Column\">\r\n                  <Form.Label>Column</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    className=\"height-30px\"\r\n                    name=\"contact_column\"\r\n                    onChange={this.handleInputChange}\r\n                    value={this.state.contact_column}\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.contact_column}\r\n                  </div>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Position\">\r\n                  <Form.Label>Position</Form.Label>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    className=\"height-30px\"\r\n                    name=\"contact_position\"\r\n                    onChange={this.handleInputChange}\r\n                    value={this.state.contact_position}\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.contact_position}\r\n                  </div>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Editable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"contact_editable\"\r\n                      value=\"editable\"\r\n                      checked={this.state.contact_editable}\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Editable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Sortable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"contact_sortable\"\r\n                      value=\"sortable\"\r\n                      checked={this.state.contact_sortable}\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Sortable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Filterable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"contact_filterable\"\r\n                      value=\"filterable\"\r\n                      checked={this.state.contact_filterable}\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Filterable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Required\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"contact_required\"\r\n                      value=\"required\"\r\n                      checked={this.state.contact_required}\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Required\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"optionType\">\r\n                  <Form.Label>Type</Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    size=\"sm\"\r\n                    name=\"contact_type\"\r\n                    onChange={this.handleInputChange}\r\n                    value={this.state.contact_type}\r\n                  >\r\n                    {fieldTypes && fieldTypes.length > 0\r\n                      ? fieldTypes.map(({ label, value }, index) => (\r\n                          <option key={index} value={value}>\r\n                            {label}\r\n                          </option>\r\n                        ))\r\n                      : null}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Values\">\r\n                  <Form.Label>Values</Form.Label>\r\n                  <Select\r\n                    isMulti\r\n                    defaultValue={\r\n                      this.state.contact_values ? this.state.contact_values : []\r\n                    }\r\n                    options={this.state.groupedOptions}\r\n                    formatGroupLabel={formatGroupLabel}\r\n                    onChange={this.handleSelectChange2}\r\n                    name=\"contact_values\"\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.contact_values}\r\n                  </div>\r\n                </Form.Group>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <button className=\"btn btn-md btn-primary  mr-1\">Save</button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-md btn-secondary\"\r\n                  onClick={(e) =>\r\n                    this.setState({\r\n                      contactEditModal: false,\r\n                      errors: {},\r\n                      contact_column: \"\",\r\n                      contact_editable: false,\r\n                      contact_sortable: false,\r\n                      contact_filterable: false,\r\n                      contact_required: false,\r\n                      contact_position: this.props.contacts.length + 1,\r\n                      contact_type: \"Text\",\r\n                      contact_values: [],\r\n                    })\r\n                  }\r\n                >\r\n                  {\" \"}\r\n                  Close\r\n                </button>\r\n              </Modal.Footer>\r\n            </form>\r\n          </Modal>\r\n\r\n          {/* Deal Modal */}\r\n          <Modal\r\n            show={this.state.dealModal}\r\n            onHide={(e) =>\r\n              this.setState({\r\n                dealModal: false,\r\n                errors: {},\r\n                deal_column: \"\",\r\n                deal_editable: false,\r\n                deal_sortable: false,\r\n                deal_filterable: false,\r\n                deal_required: false,\r\n                deal_position: this.props.deals.length + 1,\r\n                deal_type: \"Text\",\r\n                deal_values: [],\r\n              })\r\n            }\r\n            centered\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"md\"\r\n          >\r\n            <form className=\"w-100\" onSubmit={this.onDealSubmit}>\r\n              <Modal.Header closebutton=\"true\">\r\n                <Modal.Title>New Deal Field</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Form.Group controlId=\"Column\">\r\n                  <Form.Label>Column</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    className=\"height-30px\"\r\n                    name=\"deal_column\"\r\n                    onChange={this.handleInputChange}\r\n                    value={deal_column}\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.deal_column}\r\n                  </div>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Position\">\r\n                  <Form.Label>Position</Form.Label>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    className=\"height-30px\"\r\n                    name=\"deal_position\"\r\n                    onChange={this.handleInputChange}\r\n                    value={deal_position}\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.deal_position}\r\n                  </div>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Editable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"deal_editable\"\r\n                      value=\"editable\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Editable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Sortable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"deal_sortable\"\r\n                      value=\"sortable\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Sortable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Filterable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"deal_filterable\"\r\n                      value=\"filterable\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Filterable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Required\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"deal_required\"\r\n                      value=\"required\"\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Required\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"optionType\">\r\n                  <Form.Label>Type</Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    size=\"sm\"\r\n                    name=\"deal_type\"\r\n                    onChange={this.handleInputChange}\r\n                  >\r\n                    {fieldTypes && fieldTypes.length > 0\r\n                      ? fieldTypes.map(({ label, value }, index) => (\r\n                          <option key={index} value={value}>\r\n                            {label}\r\n                          </option>\r\n                        ))\r\n                      : null}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Values\">\r\n                  <Form.Label>Values</Form.Label>\r\n                  {/* <Form.Control type=\"text\" className=\"height-30px\" /> */}\r\n                  <Select\r\n                    isMulti\r\n                    options={this.state.groupedOptions}\r\n                    formatGroupLabel={formatGroupLabel}\r\n                    onChange={this.handleSelectChange3}\r\n                    name=\"deal_values\"\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.deal_values}\r\n                  </div>\r\n                </Form.Group>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <button className=\"btn btn-md btn-primary  mr-1\">Save</button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-md btn-secondary\"\r\n                  onClick={(e) =>\r\n                    this.setState({\r\n                      dealModal: false,\r\n                      errors: {},\r\n                      deal_column: \"\",\r\n                      deal_editable: false,\r\n                      deal_sortable: false,\r\n                      deal_filterable: false,\r\n                      deal_required: false,\r\n                      deal_position: this.props.deals.length + 1,\r\n                      deal_type: \"Text\",\r\n                      deal_values: [],\r\n                    })\r\n                  }\r\n                >\r\n                  {\" \"}\r\n                  Close\r\n                </button>\r\n              </Modal.Footer>\r\n            </form>\r\n          </Modal>\r\n\r\n          {/* Deal Edit Modal */}\r\n          <Modal\r\n            show={this.state.dealEditModal}\r\n            onHide={(e) =>\r\n              this.setState({\r\n                dealEditModal: false,\r\n                errors: {},\r\n                deal_column: \"\",\r\n                deal_editable: false,\r\n                deal_sortable: false,\r\n                deal_filterable: false,\r\n                deal_required: false,\r\n                deal_position: this.props.deals.length + 1,\r\n                deal_type: \"Text\",\r\n                deal_values: [],\r\n              })\r\n            }\r\n            centered\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"md\"\r\n          >\r\n            <form className=\"w-100\" onSubmit={this.onDealEditSubmit}>\r\n              <Modal.Header closebutton=\"true\">\r\n                <Modal.Title>Edit Deal Field</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>\r\n                <Form.Group controlId=\"Column\">\r\n                  <Form.Label>Column</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    className=\"height-30px\"\r\n                    name=\"deal_column\"\r\n                    onChange={this.handleInputChange}\r\n                    value={this.state.deal_column}\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.deal_column}\r\n                  </div>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Position\">\r\n                  <Form.Label>Position</Form.Label>\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    className=\"height-30px\"\r\n                    name=\"deal_position\"\r\n                    onChange={this.handleInputChange}\r\n                    value={this.state.deal_position}\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.deal_position}\r\n                  </div>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Editable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"deal_editable\"\r\n                      value=\"editable\"\r\n                      checked={this.state.deal_editable}\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Editable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Sortable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"deal_sortable\"\r\n                      value=\"sortable\"\r\n                      checked={this.state.deal_sortable}\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Sortable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Filterable\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"deal_filterable\"\r\n                      value=\"filterable\"\r\n                      checked={this.state.deal_filterable}\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Filterable\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Required\">\r\n                  <label className=\"checkbox-label\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"deal_required\"\r\n                      value=\"required\"\r\n                      checked={this.state.deal_required}\r\n                      onChange={this.handleInputChange}\r\n                    />\r\n                    <span className=\"geekmark\" /> Required\r\n                  </label>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"optionType\">\r\n                  <Form.Label>Type</Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    size=\"sm\"\r\n                    name=\"deal_type\"\r\n                    onChange={this.handleInputChange}\r\n                    value={this.state.deal_type}\r\n                  >\r\n                    {fieldTypes && fieldTypes.length > 0\r\n                      ? fieldTypes.map(({ label, value }, index) => (\r\n                          <option key={index} value={value}>\r\n                            {label}\r\n                          </option>\r\n                        ))\r\n                      : null}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"Values\">\r\n                  <Form.Label>Values</Form.Label>\r\n                  <Select\r\n                    isMulti\r\n                    defaultValue={\r\n                      this.state.deal_values ? this.state.deal_values : []\r\n                    }\r\n                    options={this.state.groupedOptions}\r\n                    formatGroupLabel={formatGroupLabel}\r\n                    onChange={this.handleSelectChange3}\r\n                    name=\"deal_values\"\r\n                  />\r\n                  <div className=\"text-danger\">\r\n                    {this.state.errors.deal_values}\r\n                  </div>\r\n                </Form.Group>\r\n              </Modal.Body>\r\n              <Modal.Footer>\r\n                <button className=\"btn btn-md btn-primary mr-1\">Save</button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-md btn-secondary\"\r\n                  onClick={(e) =>\r\n                    this.setState({\r\n                      dealEditModal: false,\r\n                      errors: {},\r\n                      deal_column: \"\",\r\n                      deal_editable: false,\r\n                      deal_sortable: false,\r\n                      deal_filterable: false,\r\n                      deal_required: false,\r\n                      deal_position: this.props.deals.length + 1,\r\n                      deal_type: \"Text\",\r\n                      deal_values: [],\r\n                    })\r\n                  }\r\n                >\r\n                  {\" \"}\r\n                  Close\r\n                </button>\r\n              </Modal.Footer>\r\n            </form>\r\n          </Modal>\r\n        </Layout>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth_user: state.auth.user,\r\n  stages: state.stage.list,\r\n  organisations: state.organisation.list,\r\n  organisation_detail: state.organisation.single,\r\n  contacts: state.contact.list,\r\n  deals: state.deal.list,\r\n  countries: state.country.list,\r\n  industries: state.industry.list,\r\n  clusters: state.cluster.list,\r\n});\r\nconst mapDispatchToProps = {\r\n  addStage,\r\n  getStages,\r\n  deleteStage,\r\n  changeStagePosition,\r\n  updateStage,\r\n  changeFieldPosition,\r\n  addOrganisation,\r\n  getOrganisations,\r\n  deleteOrganisation,\r\n  updateOrganisation,\r\n  getOrganisation,\r\n  addContact,\r\n  getContacts,\r\n  deleteContact,\r\n  updateContact,\r\n  addDeal,\r\n  getDeals,\r\n  deleteDeal,\r\n  updateDeal,\r\n  getAllCountries,\r\n  getAllIndustries,\r\n  getAllClusters,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Configuration);\r\n","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\AddIndustry.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\EditIndustry.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Clusters.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\AddCluster.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Industries.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Reasons.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\EditCluster.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\AddReason.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Reports.js",["279"],"import React, { Component } from \"react\";\r\nimport Layout from \"./layout\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { getLostReports } from '../redux/actions/report';\r\nimport { getAllReasons } from '../redux/actions/reason';\r\nimport { getAllUsers } from '../redux/actions/user';\r\nimport { connect } from \"react-redux\";\r\nimport { Modal } from 'react-bootstrap';\r\nimport Pagination from './Pagination';\r\nimport moment from \"moment-timezone\";\r\nimport { DateRangePicker } from \"rsuite\";\r\nimport { DateStaticRanges } from \"../utils/helpers\";\r\n\r\nexport class Reports extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      showDeleteModal: false,\r\n      selectedId: \"\",\r\n      inputDKey: Date.now(),\r\n      lost_by: \"\",\r\n      lost_reason: \"\",\r\n      date_range: \"\",\r\n    };\r\n\r\n    this.closeDeleteModal.bind(this);\r\n    this.openDeleteMoal.bind(this);\r\n    this.confirmDelete.bind(this);\r\n    this.paginate.bind(this);\r\n    this.handleDate.bind(this);\r\n    this.onFilterSubmit = this.onFilterSubmit.bind(this);\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.clearDate = this.clearDate.bind(this);\r\n    this.clearFilter.bind(this);\r\n  }\r\n  componentDidMount = async () => {\r\n    let param = {\r\n        current_page:1,\r\n        timezone:moment.tz.guess(true)\r\n    }\r\n    this.props.getLostReports(param);\r\n    this.props.getAllReasons();\r\n    this.props.getAllUsers();\r\n  };\r\n  paginate = (pageNumber) => (e) => {\r\n    e.preventDefault();\r\n    const {lost_by, lost_reason, date_range} = this.state;\r\n    let param = {\r\n        current_page:pageNumber,\r\n        lost_by: lost_by,\r\n        lost_reason: lost_reason,\r\n        date_range: date_range,\r\n        timezone:moment.tz.guess(true)\r\n    }\r\n    this.props.getLostReports(param);\r\n  };\r\n\r\n  handleDelete = (id) => (e) => {\r\n    this.setState({ showDeleteModal: true, selectedId: id });\r\n  };\r\n\r\n  handleEdit = (id) => (e) => {\r\n    this.props.history.push(`/edit-report/${id}`);\r\n  };\r\n\r\n  closeDeleteModal = (e) => {\r\n    this.setState({ showDeleteModal: false });\r\n  };\r\n\r\n  openDeleteMoal = (e) => {\r\n    this.setState({ showDeleteModal: true });\r\n  };\r\n\r\n  confirmDelete = (e) => {\r\n    this.props.deleteReport(this.state.selectedId, this.props);\r\n    this.setState({ showDeleteModal: false, selectedId: \"\" });\r\n  };\r\n\r\n  // Filter Submit\r\n  onFilterSubmit = (e) => {\r\n    e.preventDefault();\r\n    const {lost_by, lost_reason, date_range} = this.state;\r\n\r\n    let param = {\r\n      current_page: 1,\r\n      lost_by: lost_by,\r\n      lost_reason: lost_reason,\r\n      date_range: date_range,\r\n      timezone:moment.tz.guess(true)\r\n    };\r\n    this.props.getLostReports(param);\r\n  };\r\n\r\n  handleDate = (date,name) => {\r\n    let new_date = [];\r\n    for (const dt of date) {\r\n      new_date.push(moment(dt).format(\"YYYY-MM-DD\"));\r\n    }\r\n    let date_var = new_date.length > 0 ? new_date : \"\";\r\n    this.setState({ [name]:date_var });\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    this.setState({ [name]:value });\r\n  }\r\n\r\n  clearDate = (name) => {\r\n    this.setState({ [name]:\"\" });\r\n  }\r\n\r\n  clearFilter = (e) => {\r\n    this.setState({ \r\n        lost_by: \"\",\r\n        lost_reason: \"\",\r\n        date_range: \"\", \r\n        inputDKey:Date.now()\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Helmet>\r\n          <title>Reports</title>\r\n        </Helmet>\r\n        <Layout title=\"Reports\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"card shadow mb-4\">\r\n              <div className=\"card-header d-flex justify-content-between align-items-center\">\r\n                <form\r\n                  onSubmit={this.onFilterSubmit}\r\n                  className=\"lostReportFilterFrm\"\r\n                >\r\n                  <div className=\"form-group\">\r\n                    <select\r\n                      name=\"lost_by\"\r\n                      className=\"form-control\"\r\n                      onChange={this.handleInputChange}\r\n                      value={this.state.lost_by}\r\n                    >\r\n                      <option value=\"\">Lost By</option>\r\n                      {this.props.users &&\r\n                        this.props.users.length > 0 &&\r\n                        this.props.users.map((user, index) => (\r\n                          <option key={user._id} value={user._id}>\r\n                            {user.username}\r\n                          </option>\r\n                        ))}\r\n                    </select>\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <select\r\n                      name=\"lost_reason\"\r\n                      className=\"form-control\"\r\n                      onChange={this.handleInputChange}\r\n                      value={this.state.lost_reason}\r\n                    >\r\n                      <option value=\"\">Deal Lost Reason</option>\r\n                      {this.props.reasons &&\r\n                        this.props.reasons.length > 0 &&\r\n                        this.props.reasons.map((reason, index) => (\r\n                          <option key={reason._id} value={reason._id}>\r\n                            {reason.title}\r\n                          </option>\r\n                        ))}\r\n                    </select>\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                    <DateRangePicker\r\n                      key={this.state.inputDKey}\r\n                      isoWeek\r\n                      format=\"YYYY-MM-DD\"\r\n                      style={{ width: \"100%\" }}\r\n                      placement=\"auto\"\r\n                      onChange={(date) => {\r\n                        this.handleDate(date,\"date_range\");\r\n                      }}\r\n                      onClean={() => this.clearDate(\"date_range\")}\r\n                      name=\"date_range\"\r\n                      ranges={DateStaticRanges}\r\n                      size=\"sm\"\r\n                      placeholder=\"DD-MM-YYYY to DD-MM-YYYY\"\r\n                      renderValue={(value) => {\r\n                        console.log(\"value:\", value);\r\n                        return `${moment(value[0]).format(\r\n                          \"DD-MM-YYYY\"\r\n                        )} to ${moment(value[1]).format(\"DD-MM-YYYY\")}`;\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <div className=\"form-group btn-group\">\r\n                    <button className=\"btn btn-sm btn-secondary\" type=\"submit\">\r\n                      Apply Filter\r\n                    </button>\r\n                    <button className=\"btn btn-sm btn-secondary ml-1\" onClick={this.clearFilter}>\r\n                      Clear Filter\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <div className=\"table-responsive\">\r\n                  <table\r\n                    className=\"table table-bordered table-hover table-md\"\r\n                    id=\"dataTable\"\r\n                    width=\"100%\"\r\n                    cellSpacing={0}\r\n                  >\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Organization</th>\r\n                        <th>Contact Name</th>\r\n                        <th>Responsible</th>\r\n                        <th>User</th>\r\n                        <th>Lost Reason</th>\r\n                        <th>Date</th>\r\n                      </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                      {this.props.reports && this.props.reports.length > 0 ? (\r\n                        this.props.reports.map((report, index) => (\r\n                          <tr key={report._id}>\r\n                            <td>{report.organization}</td>\r\n                            <td>{report.contact_name}</td>\r\n                            <td>{report.responsible}</td>\r\n                            <td>{report.reported_user}</td>\r\n                            <td>{report.lost_reason}</td>\r\n                            <td>{report.action_date_time}</td>\r\n                          </tr>\r\n                        ))\r\n                      ) : (\r\n                        <tr>\r\n                          <td className=\"text-center\" colSpan=\"5\">\r\n                            No Records\r\n                          </td>\r\n                        </tr>\r\n                      )}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n                {this.props.reports.length > 0 && this.props.pagination ? (\r\n                  <>\r\n                    <div\r\n                      className=\"d-flex justify-content-end\"\r\n                      style={{ height: \"25px\" }}\r\n                    >\r\n                      <span\r\n                        className=\"mr-3\"\r\n                        style={{ color: \"rgb(0 123 255)\" }}\r\n                      >\r\n                        <small>{this.props.pagination.recordRange}</small>\r\n                      </span>\r\n                      <Pagination\r\n                        totalPages={this.props.pagination.totalPages}\r\n                        paginate={this.paginate}\r\n                        currentPage={this.props.pagination.page}\r\n                      />\r\n                    </div>\r\n                  </>\r\n                ) : null}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <Modal\r\n            show={this.state.showDeleteModal}\r\n            onHide={this.closeDeleteModal}\r\n            centered\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            size=\"sm\"\r\n            closebutton={true}\r\n          >\r\n            <Modal.Body>\r\n              <div className=\"delete-popup\">\r\n                <div className=\"close-icon\" onClick={this.closeDeleteModal}>\r\n                  <i className=\"fa fa-times\" />\r\n                </div>\r\n                <div className=\"delete-popup-img\" />\r\n                <div className=\"delete-popup-heading\">Delete Permanently</div>\r\n                <div className=\"delete-popup-subheading\">\r\n                  Are you sure you want permanently delete these record(s) from\r\n                  your list?\r\n                </div>\r\n                <div className=\"mt-3\">\r\n                  <button\r\n                    className=\"btn btn-sm btn-primary\"\r\n                    onClick={this.confirmDelete}\r\n                  >\r\n                    Yes, Delete\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </Modal.Body>\r\n          </Modal>\r\n        </Layout>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({ reports: state.report.lost_report_list, reasons: state.reason.list,users: state.user.list, pagination: state.report.pagination });\r\nconst mapDispatchToProps = {\r\n  getLostReports,getAllReasons,getAllUsers\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Reports);\r\n","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Dnd_v1.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\EditReason.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\EditUser.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\EditCountry.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\user.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\industry.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\PageNotFound.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\organisation.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\cluster.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\contact.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\deal.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\authentication.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\alert.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\reason.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\report.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\country.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\reducers\\stage.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\utils\\auth.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Alert.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\user.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\authentication.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\types.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\country.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\reason.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\utils\\helpers.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\Pagination.js",["280","281","282","283","284"],"import React from \"react\";\r\n\r\nconst Pagination = ({ totalPages,paginate,currentPage }) => {\r\n  const pageNumbers = [];\r\n\r\n  for (let i = 1; i <= totalPages; i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <nav>\r\n        <ul className=\"pagination pagination-sm overflow-auto\">\r\n          <li className={`page-item ${currentPage == 1 ? \"disabled\" : \"\"}`}>\r\n            <a \r\n            className={`page-link`} \r\n            href=\"#\"\r\n            onClick={paginate(parseInt(currentPage)-1)}\r\n            >\r\n              <span aria-hidden=\"true\">&laquo;</span>\r\n              <span className=\"sr-only\">Previous</span>\r\n            </a>\r\n          </li>\r\n\r\n          {/* {pageNumbers.map((number) => (              \r\n            <li className={`page-item ${currentPage == number ? \"active\" : \"\"} `} key={number}>\r\n              <a\r\n                href=\"#\"\r\n                className=\"page-link\"\r\n                onClick={paginate(number)}\r\n              >\r\n                {number}\r\n              </a>\r\n            </li>\r\n          ))} */}\r\n\r\n          {\r\n            (currentPage >= 1 && currentPage <= totalPages) ? (\r\n              <>               \r\n                <li className={`page-item active`} key={currentPage}>\r\n                  <a\r\n                    href=\"#\"\r\n                    className=\"page-link\"\r\n                    onClick={paginate(currentPage)}\r\n                  >\r\n                    {currentPage}\r\n                  </a>\r\n                </li>                \r\n              </>              \r\n            ) : null\r\n          }\r\n\r\n          <li className={`page-item ${currentPage == totalPages ? \"disabled\" : \"\"}`}>\r\n            <a className={`page-link`} href=\"#\" onClick={paginate( parseInt(currentPage)+1)}>\r\n              <span aria-hidden=\"true\">&raquo;</span>\r\n              <span className=\"sr-only\">Next</span>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\report.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\industry.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\cluster.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\contact.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\organisation.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\deal.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\stage.js",["285"],"import axios from \"axios\";\r\n\r\nimport {\r\n  API_URL,\r\n  ADD_STAGE,\r\n  UPDATE_STAGE,\r\n  GET_STAGES,\r\n  GET_STAGE,\r\n  DELETE_STAGE\r\n} from \"./types\";\r\nimport { setAlert } from './alert';\r\n\r\n// Get Stages\r\nexport const getStages = () => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(`${API_URL}/admin/stages`);\r\n    dispatch({ type: GET_STAGES, payload: res.data.stages });\r\n  } catch (err) {\r\n    dispatch(setAlert(err.message, 'danger'));\r\n  }\r\n};\r\n\r\n// Add Stage\r\nexport const addStage = (formData,config, props) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.post(`${API_URL}/admin/stage/add`, formData, config);\r\n    if(res.data.success){\r\n      dispatch({ type: ADD_STAGE, payload: res.data.stage });\r\n      dispatch(setAlert(res.data.msg, 'success'));\r\n      props.history.push('/configuration');\r\n    }\r\n    else{\r\n      dispatch(setAlert(res.data.msg, 'warning'));\r\n    }\r\n  } catch (err) {\r\n    dispatch(setAlert(err.message, 'danger'));\r\n  }\r\n};\r\n\r\n// Get Single Stage\r\nexport const getStage = (param) => async (dispatch) => {\r\n    try {\r\n      const res = await axios.get(`${API_URL}/admin/stage/${param._id}`);\r\n      dispatch({ type: GET_STAGE, payload: res.data.stage });\r\n      // dispatch(setAlert(res.data.msg, 'success'));\r\n    } catch (err) {\r\n      dispatch(setAlert(err.message, 'danger'));\r\n    }\r\n  };\r\n\r\n// Delete Stage\r\nexport const deleteStage = (id,props) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.delete(`${API_URL}/admin/stage/delete/${id}`);\r\n    dispatch({ type: DELETE_STAGE, payload: id });\r\n    dispatch(setAlert(res.data.msg, 'success'));\r\n  } catch (err) {\r\n    dispatch(setAlert(err.message, 'danger'));\r\n  }\r\n};\r\n\r\n// Update Stage\r\nexport const updateStage = (formData,config,props) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.post(`${API_URL}/admin/stage/update`, formData, config);\r\n    if(res.data.success){\r\n      dispatch({ type: UPDATE_STAGE, payload: res.data.stage });\r\n      // dispatch(setAlert(res.data.msg, 'success'));\r\n      // props.history.push('/configuration');\r\n    }\r\n    else{\r\n      dispatch(setAlert(res.data.msg, 'warning'));\r\n    }   \r\n  } catch (err) {\r\n    dispatch(setAlert(err.message, 'danger'));\r\n  }\r\n};\r\n\r\n// Change Stage Position\r\nexport const changeStagePosition = (formData,config,props) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.post(`${API_URL}/admin/stage/changePosition`, formData, config);\r\n    dispatch({ type: GET_STAGES, payload: res.data.stages });\r\n    props.history.push('/configuration');\r\n  } catch (err) {\r\n    dispatch(setAlert(err.message, 'danger'));\r\n  }\r\n};\r\n\r\n// Change Field Position\r\nexport const changeFieldPosition = (formData,config) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.post(`${API_URL}/admin/field/changePosition`, formData, config);\r\n  } catch (err) {\r\n    dispatch(setAlert(err.message, 'danger'));\r\n  }\r\n};","C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\layout\\index.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\redux\\actions\\alert.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\layout\\Sidebar.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\layout\\Header.js",[],"C:\\PROJECTS\\reactjs\\rukkor\\rukkor-backend\\src\\components\\layout\\Footer.js",[],{"ruleId":"286","replacedBy":"287"},{"ruleId":"288","replacedBy":"289"},{"ruleId":"290","severity":1,"message":"291","line":947,"column":30,"nodeType":"292","messageId":"293","endLine":947,"endColumn":32},{"ruleId":"290","severity":1,"message":"291","line":947,"column":70,"nodeType":"292","messageId":"293","endLine":947,"endColumn":72},{"ruleId":"290","severity":1,"message":"291","line":947,"column":118,"nodeType":"292","messageId":"293","endLine":947,"endColumn":120},{"ruleId":"290","severity":1,"message":"291","line":956,"column":21,"nodeType":"292","messageId":"293","endLine":956,"endColumn":23},{"ruleId":"290","severity":1,"message":"291","line":958,"column":28,"nodeType":"292","messageId":"293","endLine":958,"endColumn":30},{"ruleId":"290","severity":1,"message":"291","line":960,"column":28,"nodeType":"292","messageId":"293","endLine":960,"endColumn":30},{"ruleId":"294","severity":1,"message":"295","line":1103,"column":33,"nodeType":"296","endLine":1107,"endColumn":34},{"ruleId":"294","severity":1,"message":"295","line":1322,"column":23,"nodeType":"296","endLine":1326,"endColumn":24},{"ruleId":"294","severity":1,"message":"295","line":1522,"column":23,"nodeType":"296","endLine":1522,"endColumn":81},{"ruleId":"294","severity":1,"message":"295","line":1714,"column":23,"nodeType":"296","endLine":1714,"endColumn":78},{"ruleId":"297","severity":1,"message":"298","line":3,"column":10,"nodeType":"299","messageId":"300","endLine":3,"endColumn":14},{"ruleId":"290","severity":1,"message":"291","line":14,"column":51,"nodeType":"292","messageId":"293","endLine":14,"endColumn":53},{"ruleId":"294","severity":1,"message":"301","line":15,"column":13,"nodeType":"296","endLine":19,"endColumn":14},{"ruleId":"294","severity":1,"message":"301","line":41,"column":19,"nodeType":"296","endLine":45,"endColumn":20},{"ruleId":"290","severity":1,"message":"291","line":53,"column":51,"nodeType":"292","messageId":"293","endLine":53,"endColumn":53},{"ruleId":"294","severity":1,"message":"301","line":54,"column":13,"nodeType":"296","endLine":54,"endColumn":94},{"ruleId":"297","severity":1,"message":"302","line":93,"column":11,"nodeType":"299","messageId":"300","endLine":93,"endColumn":14},"no-native-reassign",["303"],"no-negated-in-lhs",["304"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'res' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]